{
    "name": "ChirpStack Uplink data converter for Yobiiq EM2101",
    "type": "UPLINK",
    "debugMode": true,
    "configuration": {
        "scriptLang": "TBEL",
        "decoder": "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
        "tbelDecoder": "var data = decodeToJson(payload);\r\nvar deviceName = data.deviceInfo.deviceName;\r\nvar deviceType = 'Electricity Meter';\r\nvar groupName = 'Electricity Meters';\r\n\r\n// --- attributes and telemetry objects ---\r\nvar telemetryArray = [];\r\nvar attributes = {};\r\n\r\n// --- Timestamp parsing\r\nvar dateString = data.time;\r\nvar timestamp = -1;\r\nif (dateString != null) {\r\n  timestamp = new Date(dateString).getTime();\r\n  if (timestamp == -1) {\r\n      var secondsSeparatorIndex = dateString.lastIndexOf('.') + 1;\r\n      var millisecondsEndIndex = dateString.lastIndexOf('+');\r\n      if (millisecondsEndIndex == -1) {\r\n          millisecondsEndIndex = dateString.lastIndexOf('Z');\r\n      }\r\n      if (millisecondsEndIndex == -1) {\r\n          millisecondsEndIndex = dateString.lastIndexOf('-');\r\n      }\r\n      if (millisecondsEndIndex == -1) {\r\n          if (dateString.length >= secondsSeparatorIndex + 3) {\r\n              dateString = dateString.substring(0, secondsSeparatorIndex + 3);\r\n          }\r\n      } else {\r\n          dateString = dateString.substring(0, secondsSeparatorIndex + 3) +\r\n              dateString.substring(millisecondsEndIndex, dateString.length);\r\n      }\r\n      timestamp = new Date(dateString).getTime();\r\n  }\r\n}\r\n// If we cannot parse timestamp - we will use the current timestamp\r\nif (timestamp == -1) {\r\n    timestamp = Date.now();\r\n}\r\n\r\n// You can exclude some keys from the result\r\nvar excludeFromAttributesList = [\"object\", \"deviceName\", \"rxInfo\", \"confirmed\", \"data\", \"deduplicationId\",\"time\", \"adr\", \"dr\", \"fCnt\",\"faultAlarm\",\"smokeAlarm\",\"faultAlarm\",\"interconnectAlarm\",\"lowBatteryAlarm\",\"batteryLevelInPercentage\",\"powerEvent\",\"fPort\"];\r\n// exclude object (!important)\r\nvar excludeFromTelemetryList = [\"object\", \"data\", \"deviceInfo\", \"txInfo\", \"devAddr\", \"confirmed\", \"adr\", \"time\",  \"region_common_name\", \"region_config_id\", \"deduplicationId\", \"deviceModel\", \"codecVersion\", \"productCode\", \"manufacturer\", \"nsTime\", \"uplinkId\", \"context\", \"crcStatus\", \"metadata\", \"location\", \"gatewayId\"];\r\n\r\n\r\n\r\nvar attributesData = toFlatMap(data, excludeFromAttributesList, false);\r\nvar telemetryData = toFlatMap(data, excludeFromTelemetryList, false);\r\nattributes.putAll(attributesData);\r\ntelemetryArray.push({\r\n    ts: timestamp,\r\n    values: telemetryData\r\n});\r\n\r\n// Get uplink decoded object (object field depends on ChirpStack codec output)\r\nvar up = {};\r\nup.timestamp = timestamp;\r\nup.object = data.object;\r\nup.fPort = data.fPort;\r\nup.isBasicInfo = false;\r\nup.isDownlinkAnswer = false;\r\n\r\n\r\nif(up.object == null)\r\n{\r\n    // end of uplink decoder\r\n    var result = {\r\n        deviceName: deviceName,\r\n        deviceType: deviceType,\r\n        groupName: groupName,\r\n        attributes: attributes,\r\n        telemetry: telemetryArray\r\n    };\r\n    \r\n    return result;\r\n}\r\n\r\n/* HardwareVersion or hardwareVersion indicates that is basic info so save them to attributes */\r\nif(up.fPort == 50)\r\n{\r\n    up.isDownlinkAnswer = true;\r\n    if(up.object.HardwareVersion != null || up.object.hardwareVersion != null)\r\n    {\r\n        up.isBasicInfo = true;\r\n    }\r\n}\r\n\r\nif(up.fPort >= 1 && up.fPort <= 10)\r\n{\r\n    if(up.object.Warning != null || up.object.Info != null ||\r\n        up.object.warning != null || up.object.info != null)\r\n    {\r\n        up.isDownlinkAnswer = true;\r\n    }\r\n}\r\n\r\n\r\n\r\nattributes.putAll( getAttributes(up) );\r\nvar telemetry = getTelemetry(up);\r\nif(telemetry != null)\r\n{\r\n    telemetryArray.push(telemetry);\r\n}\r\n\r\nvar result = {\r\n    deviceName: deviceName,\r\n    deviceType: deviceType,\r\n    groupName: groupName,\r\n    attributes: attributes,\r\n    telemetry: telemetryArray\r\n};\r\n\r\nreturn result;\r\n\r\n\r\n\r\n/**\r\n * @brief converts device parameters into attributes\r\n * \r\n * @param up uplink object \r\n * \r\n * @return device attributes\r\n */\r\nfunction getAttributes(up)\r\n{\r\n\tvar params = {};\r\n    params.latestFPort = up.fPort;\r\n\r\n\tif(up.isDownlinkAnswer == false)\r\n\t{\r\n\t\treturn params;\r\n\t}\r\n\r\n\tif(up.object.Warning != null || up.object.warning != null )\r\n\t{\r\n\t\tparams.latestDownlinkStatus = Date.now() + \"-FAILURE\";\r\n\t\treturn params;\r\n\t}\r\n\r\n\tif(up.object.Info != null || up.object.info != null)\r\n\t{\r\n\t\tparams.latestDownlinkStatus = Date.now() + \"-SUCCESS\";\r\n\t\treturn params;\r\n\t}\r\n    \r\n    var additionalAttributes = {};\r\n    foreach(element: up.object.entrySet())\r\n    {\r\n        if(up.isBasicInfo)\r\n        {\r\n            if(element.value instanceof java.util.Map && element.value.data != null)\r\n            {\r\n                additionalAttributes[element.key] = element.value.data;\r\n            }else{\r\n                additionalAttributes[element.key] = element.value;\r\n            }\r\n        }else\r\n        {\r\n            if(element.value instanceof java.util.Map && element.value.data != null)\r\n            {\r\n                additionalAttributes[\"latestSetting\" + element.key] = element.value.data;\r\n            }else{\r\n                additionalAttributes[\"latestSetting\" + element.key] = element.value;\r\n            }\r\n        }\r\n    }\r\n\r\n    if(up.isBasicInfo)\r\n    {\r\n        params.putAll(additionalAttributes);\r\n    }else {\r\n        params.latestDownlinkStatus = Date.now() + \"-SUCCESS\";\r\n        params.latestIncomingSettings = additionalAttributes;\r\n    }\r\n\r\n\treturn params;\r\n}\r\n\r\n/**\r\n * @brief converts device measurements into telemetry\r\n * \r\n * @param up uplink object \r\n * \r\n * @return device telemetry\r\n */\r\nfunction getTelemetry(up)\r\n{\r\n\tif(up.isBasicInfo || up.isDownlinkAnswer)\r\n\t{\r\n\t\treturn null;\r\n\t}\r\n\r\n    var ts = up.timestamp;\r\n    if(up.object.DataloggerTimestamp != null)\r\n    {\r\n        // use DataloggerTimestamp when it exists\r\n        ts = up.object.DataloggerTimestamp * 1000;   // DataloggerTimestamp is in seconds\r\n        up.object.remove(\"DataloggerTimestamp\");\r\n    } else if(up.object.dataloggerTimestamp != null)\r\n    {\r\n        // use dataloggerTimestamp when it exists\r\n        ts = up.object.dataloggerTimestamp * 1000;   // dataloggerTimestamp is in seconds\r\n        up.object.remove(\"dataloggerTimestamp\");\r\n    }\r\n\r\n    var values = {};\r\n    foreach(element: up.object.entrySet())\r\n    {\r\n        if(element.value instanceof java.util.Map && element.value.data != null)\r\n        {\r\n            values[element.key] = element.value.data;\r\n        }else{\r\n            values[element.key] = element.value;\r\n        }\r\n    }\r\n    \r\n    return {ts: ts, values: values};\r\n}",
        "encoder": null,
        "tbelEncoder": null,
        "updateOnlyKeys": [
        "manufacturer"
        ]
    },
    "additionalInfo": {
        "description": ""
    },
    "edgeTemplate": false
}