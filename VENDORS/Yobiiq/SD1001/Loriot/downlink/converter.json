{
    "name": "Loriot Downlink data converter for Yobiiq SD-1001",
    "type": "DOWNLINK",
    "debugMode": true,
    "configuration": {
      "scriptLang": "TBEL",
      "decoder": "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
      "tbelDecoder": "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions 'decodeToString' and 'decodeToJson' are already built-in **/\n\nreturn result;",
      "encoder": null,
      "tbelEncoder": "// Process data from incoming message and metadata\r\nvar input = {\r\n    fPort : parseInt(metadata.rc_fPort), // from rule chain\r\n    confirmed : metadata.rc_confirmed === \"true\" ? true : false, // from rule chain\r\n    data : msg,\r\n    variables: null,\r\n    devEui : metadata.cs_devEui, // from client scope\r\n};\r\n\r\n// Result object with encoded downlink payload\r\nvar result = {\r\n\r\n    // downlink data content type: JSON, TEXT or BINARY (base64 format)\r\n    contentType: \"TEXT\",\r\n\r\n    // downlink data\r\n    data: base64ToHex(bytesToBase64(encodeDownlink(input).bytes)),\r\n    \r\n    // Optional metadata object presented in key/value format\r\n    metadata: {\r\n        eui : input.devEui,\r\n        fPort : input.fPort,\r\n        EUI : input.devEui,\r\n        port : input.fPort,\r\n    }\r\n\r\n};\r\n\r\n\r\nreturn result;\r\n\r\n\r\n\r\n/************************************************************************************************************/\r\n\r\n// Encode encodes the given object into an array of bytes. (ChirpStack v3)\r\n//  - fPort contains the LoRaWAN fPort number\r\n//  - obj is an object, e.g. {\"temperature\": 22.5}\r\n//  - variables contains the device variables e.g. {\"calibration\": \"3.5\"} (both the key / value are of type string)\r\n// The function must return an array of bytes, e.g. [225, 230, 255, 0]\r\nfunction Encode(fPort, obj, variables) {\r\n    // Constants for downlink\r\n    var CONFIG_DOWNLINK = {\r\n        TYPE    : \"Type\",\r\n        CONFIG  : \"Config\"\r\n    };\r\n\r\n    if(obj[CONFIG_DOWNLINK.TYPE] == CONFIG_DOWNLINK.CONFIG)\r\n    {\r\n        return encodeDeviceConfiguration(obj[CONFIG_DOWNLINK.CONFIG]);\r\n    }\r\n    return [];\r\n}\r\n\r\n// Encode downlink function. (ChirpStack v4 , TTN)\r\n//\r\n// Input is an object with the following fields:\r\n// - data = Object representing the payload that must be encoded.\r\n// - variables = Object containing the configured device variables.\r\n//\r\n// Output must be an object with the following fields:\r\n// - bytes = Byte array containing the downlink payload.\r\nfunction encodeDownlink(input) {\r\n    return {\r\n        bytes: Encode(null, input.data, input.variables)\r\n    };\r\n}\r\n\r\n\r\n/************************************************************************************************************/\r\n\r\n\r\nfunction encodeDeviceConfiguration(configs)\r\n{\r\n    // Constants for device configuration \r\n    var CONFIG_DEVICE = {\r\n        FPORT : 50,\r\n        CHANNEL : 0xFF,\r\n        TYPES : {\r\n            \"reportingInterval\" : {TYPE : 0x03, SIZE : 2, MIN : 1, MAX : 65535,},\r\n            \"smokeDetector\" : {TYPE : 0x00, SIZE : 1, MIN : 0, MAX : 1,},\r\n            \"silenceBuzzer\" : {TYPE : 0x0A, SIZE : 2, MIN : 0, MAX : 65535,},\r\n            \"confirmedUplink\" : {TYPE : 0x01, SIZE : 1, MIN : 0, MAX : 1,},\r\n        }\r\n    };\r\n    var encoded = [];\r\n\r\n    foreach(configObj : configs)\r\n    {\r\n        var param = configObj.Param;\r\n        var value = configObj.Value;\r\n        var config = CONFIG_DEVICE.TYPES[param];\r\n        \r\n        if(config == null) {\r\n            return [];\r\n        }\r\n        \r\n        if(value < config.MIN || value > config.MAX) {\r\n            return [];\r\n        }\r\n        \r\n        encoded.push(CONFIG_DEVICE.CHANNEL);\r\n        encoded.push(config.TYPE);\r\n        if(config.SIZE == 1)\r\n        {\r\n            encoded.push(value);\r\n        }else if(config.SIZE == 2)\r\n        {\r\n            if(config.TYPE == 3)\r\n            {\r\n                var lowByte = value % 256;\r\n                encoded.push( ((lowByte & 0x0F) << 4) +  (lowByte >> 4) );\r\n                encoded.push( (value >> 8) % 256 );\r\n            }else\r\n            {\r\n                encoded.push( (value >> 8) % 256 );\r\n                encoded.push( value % 256 );\r\n            }\r\n        }\r\n    }\r\n\r\n    return encoded;\r\n}",
      "updateOnlyKeys": [
        "manufacturer"
      ]
    },
    "additionalInfo": {
      "description": ""
    },
    "edgeTemplate": false
  }