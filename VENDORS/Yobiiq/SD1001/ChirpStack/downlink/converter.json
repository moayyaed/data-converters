{
  "name": "ChirpStack Downlink data converter for Yobiiq SD-1001",
  "type": "DOWNLINK",
  "debugMode": true,
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": null,
    "tbelDecoder": null,
    "encoder": "// Encode downlink data from incoming Rule Engine message\n\n// msg - JSON message payload downlink message json\n// msgType - type of message, for ex. 'ATTRIBUTES_UPDATED', 'POST_TELEMETRY_REQUEST', etc.\n// metadata - list of key-value pairs with additional data about the message\n// integrationMetadata - list of key-value pairs with additional data defined in Integration executing this converter\n\n/** Encoder **/\n\nvar data = {};\n\n// Process data from incoming message and metadata\n\ndata.tempFreq = msg.temperatureUploadFrequency;\ndata.humFreq = msg.humidityUploadFrequency;\n\ndata.devSerialNumber = metadata['ss_serialNumber'];\n\n// Result object with encoded downlink payload\nvar result = {\n\n    // downlink data content type: JSON, TEXT or BINARY (base64 format)\n    contentType: \"JSON\",\n\n    // downlink data\n    data: JSON.stringify(data),\n\n    // Optional metadata object presented in key/value format\n    metadata: {\n            topic: metadata['deviceType']+'/'+metadata['deviceName']+'/upload'\n    }\n\n};\n\nreturn result;",
    "tbelEncoder": "// Encode downlink data from incoming Rule Engine message\r\n\r\n// msg - JSON message payload downlink message json\r\n// msgType - type of message, for ex. 'ATTRIBUTES_UPDATED', 'POST_TELEMETRY_REQUEST', etc.\r\n// metadata - list of key-value pairs with additional data about the message\r\n// integrationMetadata - list of key-value pairs with additional data defined in Integration executing this converter\r\n\r\n/** Encoder **/\r\n\r\n\r\n// Process data from incoming message and metadata\r\nvar input = {\r\n    fPort: parseInt(metadata.cs_fPort),\r\n    eui: metadata.cs_eui,\r\n    data : msg,\r\n    variables: null\r\n};\r\n\r\n// Result object with encoded downlink payload\r\nvar result = {\r\n\r\n    // downlink data content type: JSON, TEXT or BINARY (base64 format)\r\n    contentType: \"TEXT\",\r\n\r\n    // downlink data\r\n    data: bytesToBase64(encodeDownlink(input)),\r\n\r\n    // Optional metadata object presented in key/value format\r\n    metadata: {\r\n        eui: input.eui,\r\n        fPort: input.fPort,\r\n    }\r\n};\r\n\r\n\r\nreturn result;\r\n\r\n\r\n\r\n/************************************************************************************************************/\r\n\r\n// Encode encodes the given object into an array of bytes. (ChirpStack v3)\r\n//  - fPort contains the LoRaWAN fPort number\r\n//  - obj is an object, e.g. {\"temperature\": 22.5}\r\n//  - variables contains the device variables e.g. {\"calibration\": \"3.5\"} (both the key / value are of type string)\r\n// The function must return an array of bytes, e.g. [225, 230, 255, 0]\r\nfunction Encode(fPort, obj, variables) {\r\n    // Constants for downlink\r\n    var CONFIG_DOWNLINK = {\r\n        TYPE    : \"Type\",\r\n        CONFIG  : \"Config\"\r\n    };\r\n\r\n    if(obj[CONFIG_DOWNLINK.TYPE] == CONFIG_DOWNLINK.CONFIG)\r\n    {\r\n        return encodeDeviceConfiguration(obj[CONFIG_DOWNLINK.CONFIG]);\r\n    }\r\n    return [];\r\n}\r\n\r\n// Encode downlink function. (ChirpStack v4 , TTN)\r\n//\r\n// Input is an object with the following fields:\r\n// - data = Object representing the payload that must be encoded.\r\n// - variables = Object containing the configured device variables.\r\n//\r\n// Output must be an object with the following fields:\r\n// - bytes = Byte array containing the downlink payload.\r\nfunction encodeDownlink(input) {\r\n    return Encode(null, input.data, input.variables);\r\n}\r\n\r\n\r\n/************************************************************************************************************/\r\n\r\n\r\nfunction encodeDeviceConfiguration(configs)\r\n{\r\n    // Constants for device configuration \r\n    var CONFIG_DEVICE = {\r\n        FPORT : 50,\r\n        CHANNEL : 0xFF,\r\n        TYPES : {\r\n            \"reportingInterval\" : {TYPE : 0x03, SIZE : 2, MIN : 1, MAX : 65535,},\r\n            \"smokeDetector\" : {TYPE : 0x00, SIZE : 1, MIN : 0, MAX : 1,},\r\n            \"silenceBuzzer\" : {TYPE : 0x0A, SIZE : 2, MIN : 0, MAX : 65535,},\r\n            \"confirmedUplink\" : {TYPE : 0x01, SIZE : 1, MIN : 0, MAX : 1,},\r\n        }\r\n    };\r\n    var encoded = [];\r\n\r\n    foreach(configObj : configs)\r\n    {\r\n        var param = configObj.Param;\r\n        var value = configObj.Value;\r\n        var config = CONFIG_DEVICE.TYPES[param];\r\n        \r\n        if(config == null) {\r\n            return [];\r\n        }\r\n        \r\n        if(value < config.MIN || value > config.MAX) {\r\n            return [];\r\n        }\r\n        \r\n        encoded.push(CONFIG_DEVICE.CHANNEL);\r\n        encoded.push(config.TYPE);\r\n        if(config.SIZE == 1)\r\n        {\r\n            encoded.push(value);\r\n        }else if(config.SIZE == 2)\r\n        {\r\n            if(config.TYPE == 3)\r\n            {\r\n                var lowByte = value % 256;\r\n                encoded.push( ((lowByte & 0x0F) << 4) +  (lowByte >> 4) );\r\n                encoded.push( (value >> 8) % 256 );\r\n            }else\r\n            {\r\n                encoded.push( (value >> 8) % 256 );\r\n                encoded.push( value % 256 );\r\n            }\r\n        }\r\n    }\r\n\r\n    return encoded;\r\n}",
    "updateOnlyKeys": [
      "tenantId",
      "tenantName",
      "applicationId",
      "applicationName",
      "deviceProfileId",
      "deviceProfileName",
      "devEui",
      "devAddr",
      "fPort",
      "frequency",
      "bandwidth",
      "spreadingFactor",
      "codeRate",
      "battery",
      "pir",
      "daylight",
      "confirmed",
      "gatewayId",
      "channel",
      "rfChain",
      "crcStatus"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}