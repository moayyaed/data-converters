{
  "name": "Loriot Uplink Converter for Tektelic Comfort",
  "type": "UPLINK",
  "debugMode": false,
  "debugSettings": {
    "failuresEnabled": true,
    "allEnabled": false,
    "allEnabledUntil": 1733331880270
  },
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
    "tbelDecoder": "var data = decodeToJson(payload);\nvar deviceName = data.EUI;\nvar deviceType = \"Comfort\";\nvar groupName = null; // If groupName is not null - created device will be added to the entity group with such name.\nvar customerName = null; // If customerName is not null - created devices will be assigned to customer with such name. \n\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// If you want to parse incoming data somehow, you can add your code to this function.\n// input: bytes\n// expected output:\n//  {\n//    \"attributes\": {\"attributeKey\": \"attributeValue\"},\n//    \"telemetry\": {\"telemetryKey\": \"telemetryValue\"}\n//  }\n\nfunction decodePayload(input) {\n    var output = { attributes: {}, telemetry: []};\n    \n    var decoded = {};\n    var fPort = data.port;\n    if(fPort == 10) {\n        for(var i = 0; i < input.length - 2; ) {\n            var key_1 = input[i++] & 0xff;\n            var key_2 = input[i++] & 0xff;\n            \n            if(key_1 == 0x00 && key_2 == 0xBA) {\n                decoded.battery_voltage = toFixed(parseBytesToInt(input, i, 2) * 0.001, 3);\n                i += 2;\n            }\n            else if(key_1 == 0x01 && key_2 == 0x00) {\n                val = parseBytesToInt(input, i, 1);\n                switch (val){\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tdecoded.hall_effect_state = \"Magnet Present\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 255:\n\t\t\t\t\t\tdecoded.hall_effect_state = \"Magnet Absent\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tdecoded.hall_effect_state = \"Invalid\";\n\t\t\t\t}\n                \n                i += 1;\n            }\n            else if(key_1 == 0x08 && key_2 == 0x04) {\n                decoded.hall_effect_count = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key_1 == 0x0C && key_2 == 0x00) {\n                var val = parseBytesToInt(input, i, 1);\n                \n                switch (val){\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tdecoded.impact_alarm  = \"Impact Alarm Inactive\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 255:\n\t\t\t\t\t\tdecoded.impact_alarm  = \"Impact Alarm Active\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tdecoded.impact_alarm  = \"Invalid\";\n\t\t\t\t}\n\t\t\t\t\n                i += 1;\n            }\n            else if(key_1 == 0x05 && key_2 == 0x02) {\n                decoded.impact_magnitude = toFixed(parseBytesToInt(input, i, 2) * 0.001, 3);\n                i += 2;\n            }\n            else if(key_1 == 0x07 && key_2 == 0x71) {\n                decoded.accelerationX = toFixed(parseBytesToInt(input, i + 4, 2) * 0.001, 3);\n                decoded.accelerationY = toFixed(parseBytesToInt(input, i + 2, 2) * 0.001, 3);\n                decoded.accelerationZ = toFixed(parseBytesToInt(input, i, 2) * 0.001, 3);\n                i += 6;\n            }\n            else if(key_1 == 0x0E && key_2 == 0x00) {\n                var val = parseBytesToInt(input, i, 1);\n\t\t\t\tswitch (val){\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tdecoded.extconnector_state = \"Low(short-circuit)\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 255:\n\t\t\t\t\t\tdecoded.extconnector_state = \"High(open-circuit)\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tdecoded.extconnector_state = \"Invalid\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ti += 1;\n            }\n            else if(key_1 == 0x0F && key_2 == 0x04) {\n                decoded.extconnector_count = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key_1 == 0x12 && key_2 == 0x04) {\n                decoded.extconnector_total_count = parseBytesToInt(input, i, 4);\n                i += 4;\n            }\n            else if(key_1 == 0x11 && key_2 == 0x02) {\n                decoded.extconnector_analog = toFixed(parseBytesToInt(input, i, 2) * 0.001, 3);\n                i += 2;\n            }\n            else if(key_1 == 0x0B && key_2 == 0x67) {\n                decoded.mcu_temperature = toFixed(parseBytesToInt(input, i, 2) * 0.1, 1);\n                i += 2;\n            }\n            else if(key_1 == 0x03 && key_2 == 0x67) {\n                decoded.ambient_temperature = toFixed(parseBytesToInt(input, i, 2) * 0.1, 1);\n                i += 2;\n            }\n            else if(key_1 == 0x04 && key_2 == 0x68) {\n                decoded.relative_humidity = toFixed(parseBytesToInt(input, i, 1) * 0.5, 1);\n                i += 1;\n            }\n            else if(key_1 == 0x02 && key_2 == 0x00) {\n                var val = parseBytesToInt(input, i, 1);\n                \n\t\t\t\tswitch (val){\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tdecoded.light_detected = \"Dark\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 255:\n\t\t\t\t\t\tdecoded.light_detected = \"Bright\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tdecoded.light_detected = \"Invalid\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ti += 1;\n            }\n            else if(key_1 == 0x10 && key_2 == 0x02) {\n                decoded.light_intensity = parseBytesToInt(input, i, 1);\n\t\t\t\t\n\t\t\t\ti += 1;\n            }\n            else if(key_1 == 0x0A && key_2 == 0x00) {\n                var val = parseBytesToInt(input, i, 1);\n\t\t\t\t\n\t\t\t\tswitch (val){\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tdecoded.motion_event_state = \"None\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 255:\n\t\t\t\t\t\tdecoded.motion_event_state = \"Detected\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tdecoded.motion_event_state = \"Invalid\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ti += 1;\n            }\n            else if(key_1 == 0x0D && key_2 == 0x04) {\n                decoded.motion_event_count = parseBytesToInt(input, i, 2);\n\t\t\t\t\n\t\t\t\ti += 2;\n            }\n        }\n    }\n    else if(fPort == 0x05) {\n        var key_1 = input[i++] & 0xff;\n        var key_2 = input[i++] & 0xff;\n        \n        if(key_1 == 0x40 && key_2 == 0x06) {\n            var val = input[i + 5];\n\t\t\tswitch (val){\n\t\t\t\tcase 1:\n\t\t\t\t\tdecoded_data.reset_diagnostics_reset_reason = \"Push-button reset\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tdecoded_data.reset_diagnostics_reset_reason = \"DL command rest\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tdecoded_data.reset_diagnostics_reset_reason = \"Independent watchdog reset\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 8:\n\t\t\t\t\tdecoded_data.reset_diagnostics_reset_reason = \"Power loss reset\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tdecoded_data.reset_diagnostics_reset_reason = \"Invalid\";\n\t\t\t}\n\t\t\tdecoded_data.reset_diagnostics_power_loss_reset_count = input[i + 3];\n\t\t\tdecoded_data.reset_diagnostics_watchdog_reset_count = input[i + 2];\n\t\t\tdecoded_data.reset_diagnostics_dl_reset_count = input[i + 1];\n\t\t\tdecoded_data.reset_diagnostics_button_reset_count = input[i];\n        }\n    }\n    else if (fPort == 100) {\n        for(var i = 0; i < input.length -1; ) {\n            var key = input[i++] & 0xff;\n            \n            if(key == 0x00) {\n                output.attributes.eui = bytesToHex(java.util.Arrays.copyRange(input, i, i + 8));\n                i += 8;\n            }\n            else if(key == 0x01) {\n                output.attributes.app_eui = bytesToHex(java.util.Arrays.copyRange(input, i, i + 8));\n\t\t\t\ti += 8;\n            }\n            else if (key == 0x02) {\n                output.attributes.app_key = bytesToHex(java.util.Arrays.copyRange(input, i, i + 16));\n                i += 16;\n            }\n            else if (key == 0x03) {\n                output.attributes.devAddr = bytesToHex(java.util.Arrays.copyRange(input, i, i + 4));\n                i += 4;\n            }\n            else if(key == 0x04) {\n                output.attributes.network_session_key = bytesToHex(java.util.Arrays.copyRange(input, i, i + 16));\n                i += 16;\n            }\n            else if(key == 0x05) {\n                output.attributes.app_session_key = bytesToHex(java.util.Arrays.copyRange(input, i, i + 16));\n                i += 16;\n            }\n            else if(key == 0x10) {\n                var val = (((input[i] << 8) | input[i + 1]) >> 15) & 1;\n                switch (val){\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\toutput.attributes.loramac_join_mode = \"ABP\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\toutput.attributes.loramac_join_mode = \"OTAA\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\toutput.attributes.loramac_join_mode = \"Invalid\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ti += 1;\n            }\n            else if (key == 0x11) {\n\t\t\t\tvar val = (((input[i] << 8) | input[i + 1]) >> 3) & 1;\n\t\t\t\toutput.attributes.adr = getEnableStatus(val);\n\t\t\t\t\n\t\t\t\tvar val = (((input[i] << 8) | input[i + 1]) >> 2) & 1;\n\t\t\t\toutput.attributes.duty_cycle = getEnableStatus(val);\n\t\t\t\t\n\t\t\t\tvar val = (((input[i] << 8) | input[i + 1]) >> 1) & 1;\n\t\t\t\t\n\t\t\t\tswitch (val) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\toutput.attributes.sync_word = \"Private\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\toutput.attributes.sync_word = \"Public\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\toutput.attributes.sync_word = \"Invalid\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar val = ((input[i] << 8) | input[i + 1]) & 1;\n\t\t\t\t\n\t\t\t\tswitch (val){\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\toutput.attributes.confirm_mode = \"Unconfirmed\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\toutput.attributes.confirm_mode = \"Confirmed\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t    output.attributes.confirm_mode = \"Invalid\";\n\t\t\t\t}\n\t\t\t\ti += 2;\n            }\n            else if (key == 0x12) {\n                output.attributes.dr_number = (((input[i] << 8) | input[i + 1]) >> 8) & 0xF;\n                output.attributes.tx_power_number = ((input[i] << 8) | input[i + 1]) & 0xF;\n                \n                i +=2;\n            }\n            else if (key == 0x13) {\n                output.attributes.frequency = (((input[i] << 32) | (input[i + 1] << 24) | (input[i + 2] << 16) | (input[i + 3] << 8) | input[i + 4]) >> 8) & 0xFFFFFFFF;\n                output.attributes.dr_number_rx2 = input[i + 4] & 0xFF;\n                \n                i += 5;\n            }\n            else if(key == 0x19) {\n                output.attributes.netid_msb = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x1A) {\n                output.attributes.loramac_net_id_lsb = parseBytesToInt(input, i, 2);\n\t\t\t\ti += 2;\n            }\n            else if (key == 0x20) {\n                output.attributes.seconds_per_core_tick = parseBytesToInt(input, i, 4);\n                i += 4;\n            }\n            else if(key == 0x21) {\n                output.attributes.tick_per_battery = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x22) {\n                output.attributes.tick_per_ambient_temperature = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x23) {\n                output.attributes.tick_per_relative_humidity = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x24) {\n                output.attributes.tick_per_reed_switch = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x25) {\n                output.attributes.tick_per_light = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x26) {\n                output.attributes.tick_per_accelerometer = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x27) {\n                output.attributes.tick_per_mcu_temperature = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n             else if(key == 0x28) {\n                output.attributes.tick_per_pir = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x29) {\n                output.attributes.tick_per_external_connector = parseBytesToInt(input, i, 2);\n                \n                i += 2;\n            }\n             else if(key == 0x2A) {\n                var bit0 = (input[i] >> 0) & 1;\n                var bit1 = (input[i] >> 1) & 1;\n                \n                output.attributes.mode.rising_edge_enabled = getEnableStatus(bit0);\n                output.attributes.mode.falling_edge_enabled = getEnableStatus(bit1);\n                \n                i += 1;\n            }\n            else if(key == 0x2B) {\n\t\t\t\toutput.attributes.reed_switch_count_threshold = parseBytesToInt(input, i, 2);\n\t\t\t\ti += 2;\n            }\n            else if(key == 0x2C) {\n                var bit0 = (input[i] >> 0) & 1;\n                var bit1 = (input[i] >> 1) & 1;\n                \n                output.attributes.reed_values_to_transmit_report_state_enabled = getOnOffStatus(bit0);\n                output.attributes.reed_values_to_transmit_report_count_enabled = getOnOffStatus(bit1);\n                \n                i += 1;\n            }\n            else if(key == 0x2D) {\n                var bit0 = (input[i] >> 0) & 1;\n                var bit1 = (input[i] >> 1) & 1;\n                var bit7 = (input[i] >> 7) & 1;\n                \n                output.attributes.external_mode_rising_edge_enabled_ex = getOnOffStatus(bit0);\n                output.attributes.external_mode_falling_edge_enabled_ex = getOnOffStatus(bit1);\n                \n                switch (bit7){\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\toutput.attributes.mode = \"Digital\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t    output.attributes.mode = \"Analog\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\toutput.attributes.mode = \"Invalid\";\n\t\t\t\t}\n\t\t\t\t\n                i += 1;\n            }\n            else if(key == 0x2E) {\n                output.attributes.external_connector_count_threshold = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x2F) {\n                var bit0 = (input[i] >> 0) & 1;\n                var bit1 = (input[i] >> 1) & 1;\n                var bit4 = (input[i] >> 4) & 1;\n                \n                output.attributes.external_values_to_transmit.report_state_enabled_ex = getOnOffStatus(bit0);\n                output.attributes.external_values_to_transmit.report_count_enabled_ex = getOnOffStatus(bit1);\n                output.attributes.external_values_to_transmit.count_type = bit4;\n                i += 1;\n            }\n            else if(key == 0x30) {\n                output.attributes.impact_event_threshold = toFixed(parseBytesToInt(input, i, 2) * 0x001, 3);\n                i += 2;\n            }\n            else if(key == 0x31) {\n                output.attributes.acceleration_event_threshold = toFixed(parseBytesToInt(input, i, 2) * 0.001, 3);\n                i += 2;\n            }\n            else if(key == 0x32) {\n                var bit0 = (input[i] >> 0) & 1;\n                output.attributes.values_to_transmit.report_periodic_alarm_enabled = getOnOffStatus(bit0);\n                \n                var bit1 = (input[i] >> 1) & 1;\n                output.attributes.values_to_transmit.report_periodic_magnitude_enabled = getOnOffStatus(bit1);\n                \n                var bit2 = (input[i] >> 2) & 1;\n                output.attributes.values_to_transmit.report_periodic_vector_enabled = getOnOffStatus(bit2);\n                \n                var bit4 = (input[i] >> 4) & 1;\n                output.attributes.values_to_transmit.report_event_magnitude_enabled = getOnOffStatus(bit4);\n                \n                var bit5 = (input[i] >> 5) & 1;\n                output.attributes.values_to_transmit.report_event_vector_enabled = getOnOffStatus(bit5);\n                \n                i += 1;\n            }\n            else if(key == 0x33) {\n                output.attributes.acceleration_impact_grace_period = parseBytesToInt(input, i, 2);\n\t\t\t\t\n\t\t\t\ti += 2;\n            }\n            else if (key == 0x34) {\n                var bit0 = (input[i] >> 0) & 1;\n                output.attributes.acceleration_mode.impact_threshold_enabled = getEnableStatus(bit0);\n                \n                var bit1 = (input[i] >> 1) & 1;\n\t\t\t\toutput.attributes.acceleration_mode.acceleration_threshold_enabled = getEnableStatus(bit1);\n\t\t\t\t\n\t\t\t\tvar bit4 = (input[i] >> 4) & 1;\n\t\t\t\toutput.attributes.acceleration_mode.xaxis_enabled = getEnableStatus(bit4);\n\t\t\t\t\n\t\t\t\tvar bit5 = (input[i] >> 5) & 1;\n\t\t\t\toutput.attributes.acceleration_mode.yaxis_enabled = getEnableStatus(bit5);\n\t\t\t\t\n\t\t\t\tvar bit6 = (input[i] >> 6) & 1;\n\t\t\t\toutput.attributes.acceleration_mode.zaxis_enabled = getEnableStatus(bit6);\n\t\t\t\t\n\t\t\t\tvar bit7 = (input[i] >> 7) & 1;\n\t\t\t\toutput.attributes.acceleration_mode.poweron = getOnOffStatus(bit7);\n\t\t\t\t\n\t\t\t\ti += 1;\n            }\n            else if (key == 0x35) {\n                var val = (input[i] >> 1) & 0x03;\n\t\t\t\t\n\t\t\t\tswitch (val) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\toutput.attributes.sensitivity_accelerometer_sample_rate = \"1 Hz\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\toutput.attributes.sensitivity_accelerometer_sample_rate = \"10 Hz\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\toutput.attributes.sensitivity_accelerometer_sample_rate = \"25 Hz\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\toutput.attributes.sensitivity_accelerometer_sample_rate = \"50 Hz\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\toutput.attributes.sensitivity_accelerometer_sample_rate = \"100 Hz\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\toutput.attributes.sensitivity_accelerometer_sample_rate = \"200 Hz\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\toutput.attributes.sensitivity_accelerometer_sample_rate = \"400 Hz\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\toutput.attributes.sensitivity_accelerometer_sample_rate = \"Invalid\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar val = (arg >> 4) & 0x03;\n\t\t\t\tswitch (val) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\toutput.attributes.sensitivity_accelerometer_measurement_range = \"±2 g\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\toutput.attributes.sensitivity_accelerometer_measurement_range = \"±4 g\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\toutput.attributes.sensitivity_accelerometer_measurement_range = \"±8 g\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\toutput.attributes.sensitivity_accelerometer_measurement_range = \"±16 g\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\toutput.attributes.sensitivity_accelerometer_measurement_range = \"Invalid\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ti += 1;\n            }\n            else if (key == 0x36) {\n                output.attributes.impact_alarm_grace_period  = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if (key == 0x37) {\n                output.attributes.impact_alarm_threshold_count = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if (key == 0x38) {\n                output.attributes.impact_alarm_threshold_period = parseBytesToInt(input, i, 2);\n                \n                i += 2;\n            }\n            else if (key == 0x39) {\n                output.attributes.temperature_relative_humidity_sample_period_idle = parseBytesToInt(input, i, 4);\n                \n                i += 4;\n            }\n            else if (key == 0x3A) {\n                output.attributes.temperature_relative_humidity_sample_period_active = parseBytesToInt(input, i, 4);\n                \n                i += 4;\n            }\n            else if (key == 0x3B) {\n                output.attributes.temperature_threshold_low_temp_threshold = parseBytesToInt(input, i, 1);\n                output.attributes.temperature_threshold_high_temp_threshold = parseBytesToInt(input, i + 1, 1);\n                \n                i += 2;\n            }\n            else if (key == 0x3C) {\n                var bit0 = (input[i] >> 0) & 1;\n                output.attributes.ambient_temperature_threshold_enabled = getEnableStatus(bit0);\n                \n                i += 1;\n            }\n            else if (key == 0x3D) {\n                output.attributes.rh_threshold.low_rh_threshold = parseBytesToInt(input, i, 1);\n                output.attributes.rh_threshold.high_rh_threshold = parseBytesToInt(input, i + 1, 1);\n                \n                i += 2;\n            }\n            else if (key == 0x3E) {\n                var bit0 = (input[i] >> 0) & 1;\n                output.attributes.relative_humidity_threshold_enabled =getEnableStatus(bit0);\n                \n                i += 1;\n            }\n            else if (key == 0x40) {\n                output.attributes.mcu_temperature_sample_period_idle = parseBytesToInt(input, i, 4);\n                i += 4;\n            }\n            else if (key == 0x41) {\n                output.attributes.mcu_temperature_sample_period_active = parseBytesToInt(input, i, 4);\n                i += 4;\n            }\n            else if (key == 0x42) {\n                output.attributes.mcu_temp_threshold_high_mcu_temp_threshold = input[i + 1];\n                output.attributes.mcu_temp_threshold_low_mcu_temp_threshold = input[i];\n                i += 4;\n            }\n            else if (key == 0x43) {\n                var val = input[i] & 1;\n                output.attributes.mcu_temperature_threshold_enabled = getEnableStatus(val);\n\n\t\t\t\ti += 2;\n            }\n            else if (key == 0x44) {\n                output.attributes.analog_sample_period_idle = parseBytesToInt(input, i, 4);\n                \n                i += 4;\n            }\n            else if (key == 0x45) {\n                output.attributes.analog_sample_period_active = parseBytesToInt(input, i, 4);\n                \n                i += 4;\n            }\n            else if(key == 0x46) {\n                output.attributes.analog_threshold_high_analog_threshold = toFixed(parseBytesToInt(input, i + 2, 2) * 0.001, 3);\n\t\t\t\toutput.attributes.analog_threshold_low_analog_threshold = toFixed(parseBytesToInt(input, i, 2) * 0.001, 3);\n\t\t\t\ti += 4;\n            }\n            else if (key == 0x4A) {\n                var bit0 = (input[i] >> 0) & 1;\n                output.attributes.analog_input_threshold_enabled = getEnableStatus(bit0);\n                \n                i +=1;\n            }\n            else if (key == 0x47) {\n                output.attributes.light_sample_period = parseBytesToInt(input, i, 4);\n                \n                i += 4;\n            }\n            else if (key == 0x48 ) {\n                var val = (input[i] >> 7) & 1;\n                output.attributes.light_thresholds.threshold_enabled = getEnableStatus(val);\n                output.attributes.light_thresholds.threshold = input[i] & 0x3F;\n                \n                i += 1;\n            }\n            else if (key == 0x49) {\n                var bit0 = (input[i] >> 0) & 1;\n                output.attributes.light_values_to_transmit.state_reported = getEnableStatus(bit0);\n                \n                var bit1 = (input[i] >> 1) & 1;\n                output.attributes.light_values_to_transmit.intensity_reported = getEnableStatus(bit1);\n                \n                i +=1;\n            }\n            else if (key == 0x50) {\n                output.attributes.pir_grace_period = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if (key == 0x51) {\n                output.attributes.pir_threshold = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if (key == 0x52) {\n                output.attributes.pir_threshold_period = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if (key == 0x53) {\n                var bit7 = (input[i] >> 7) & 1;\n                output.attributes.pir_mode.motion_count_reported = getEnableStatus(bit7);\n                \n                var bit6 = (input[i] >> pir_mode) & 1;\n                output.attributes.pir_mode.motion_state_reported = getEnableStatus(bit6);\n                \n                var bit1 = (input[i] >> 1) & 1;\n                output.attributes.pir_mode.event_transmission_enabled = getEnableStatus(bit1);\n                \n                var bit0 = (input[i] >> 0) & 1;\n                output.attributes.pir_mode.transducer_enabled = getEnableStatus(bit0);\n                \n                i += 1;\n            }\n            else if (key == 0x54) {\n                output.attributes.pir_mode.motion_count_reported = input[i + 1];\n                output.attributes.pir_mode.motion_state_reported = input[i];\n                \n                i += 1;\n            }\n            else if (key == 0x6F) {\n                var val = (input[i] >> 0) & 1;\n                \n                switch (val){\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\toutput.attributes_resp_to_dl_command_format = \"Invalid-write response format\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\toutput.attributes_resp_to_dl_command_format = \"4-byte CRC\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\toutput.attributes_resp_to_dl_command_format = \"Invalid\";\n\t\t\t\t}\n                \n                i += 1;\n            }\n            else if (key == 0x71) {\n                output.attributes.app_major_version = input[i + 6];\n\t\t\t\toutput.attributes.app_minor_version = input[i + 5];\n\t\t\t\toutput.attributes.app_revision = input[i + 4];\n\t\t\t\toutput.attributes.loramac_major_version = input[i + 3];\n\t\t\t\toutput.attributes.loramac_minor_version = input[i + 2];\n\t\t\t\toutput.attributes.loramac_revision = input[i + 1];\n\t\t\t\tvar val = input[i];\n\t\t\t\tswitch (val){\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\toutput.attributes.region = \"EU868\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\toutput.attributes.region = \"US915\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\toutput.attributes.region = \"AS923\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\toutput.attributes.region = \"AU915\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\toutput.attributes.region = \"IN865\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\toutput.attributes.region = \"KR920\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\toutput.attributes.region = \"RU864\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\toutput.attributes.region = \"Invalid\";\n\t\t\t\t}\n\t\t\t\ti += 7;\n            }\n        }\n    }\n    else if (fPort == 101) {\n        var size = input.length;\n        var responses = [];\n    \n        var index = 0;\n        while (index < size) {\n            var downlinkFcnt = input[index++] & 0xFF; \n            var numInvalidWrites = input[index++] & 0xFF; \n    \n            if (numInvalidWrites > 0) {\n                var invalidRegisters = [];\n                for (var i = 0; i < numInvalidWrites; i++) {\n                    invalidRegisters.add(String.format(\"0x%02X\", input[index + i]));\n                }\n                index += numInvalidWrites;\n    \n                responses.add(String.format(\n                    \"%d Invalid write command(s) from DL:%d for register(s): %s\",\n                    numInvalidWrites, downlinkFcnt, String.join(\", \", invalidRegisters)\n                ));\n            } else {\n                responses.add(String.format(\"All write commands from DL:%d were successful\", downlinkFcnt));\n            }\n        }\n        \n        decoded.response = responses;\n    }\n        \n    output.telemetry = [{\n        ts: timestamp,\n        values: decoded\n    }];\n\n    // --- Decoding code --- //\n    return output;\n}\n\n// --- attributes and telemetry objects ---\nvar telemetry = [];\nvar attributes = {};\n// --- attributes and telemetry objects ---\n\n// --- Timestamp parsing\ntimestamp = data.ts;\n// --- Timestamp parsing\n\n// Message parsing\n// To avoid paths in the decoded objects we passing false value to function as \"pathInKey\" argument.\n// Warning: pathInKey can cause already found fields to be overwritten with the last value found.\n\nvar uplinkDataList = [];\n\n// Passing incoming bytes to decodePayload function, to get custom decoding\nvar customDecoding = decodePayload(hexToBytes(data.data));\n\n// Collecting data to result\nif (customDecoding.?telemetry.size() > 0) {\n    if (customDecoding.telemetry instanceof java.util.ArrayList) {\n        foreach(telemetryObj: customDecoding.telemetry) {\n            if (telemetryObj.ts != null && telemetryObj.values != null) {\n                telemetry.add(telemetryObj);\n            }\n        }\n    } else {\n        telemetry.putAll(customDecoding.telemetry);\n    }\n}\n\nif (customDecoding.?attributes.size() > 0) {\n    attributes.putAll(customDecoding.attributes);\n}\n\n// You can add some keys manually to attributes or telemetry\nattributes.eui = data.EUI;\nattributes.fPort = data.port;\nattributes.frequency = data.freq;\n\nvar isIncludeGatewayInfo = metadata[\"includeGatewayInfo\"];\nif(isIncludeGatewayInfo == true) {\n    var addDataToTelemetry = {};\n    addDataToTelemetry.rssi = data.rssi;\n    addDataToTelemetry.seqno = data.seqno;\n    addDataToTelemetry.snr = data.snr;\n    addDataToTelemetry.ack = data.ack;\n    addDataToTelemetry.toa = data.toa;\n    addDataToTelemetry.fCnt = data.fcnt;\n    \n   telemetry = processTelemetryData(telemetry, addDataToTelemetry);\n}\n\nvar deviceInfo = {\n    deviceName: deviceName,\n    deviceType: deviceType,\n//  assetName: assetName,\n//  assetType: assetType,\n    attributes: attributes,\n    telemetry: telemetry, \n};\n\naddAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName);\n\nuplinkDataList.add(deviceInfo);\n\nvar gatewayDeviceNamePrefix = \"Gateway \";\nvar gatewayDeviceType = \"Lora gateway\";\nvar gatewayGroupName = null; // If gatewayGroupName is not null - created device will be added to the entity group with such name.\n\nif (data.cmd == \"gw\") {\n    foreach( gatewayInfo : data.gws ) {\n        var addGatewayInfo = {};\n\n        // You can add some keys manually telemetry\n        addGatewayInfo.rssi = gatewayInfo.rssi;\n        addGatewayInfo.snr = gatewayInfo.snr;\n        // You can add some keys manually telemetry\n        \n        var gatewayInfoMsg = {\n            deviceName: gatewayDeviceNamePrefix + gatewayInfo.gweui,\n            deviceType: gatewayDeviceType,\n            telemetry: [{\n                \"ts\": gatewayInfo.ts,\n                \"values\": addGatewayInfo\n            }],\n            attributes: {\n                eui: gatewayInfo.gweui\n            }\n        };\n        addAdditionalInfoForDeviceMsg(gatewayInfoMsg, customerName, gatewayGroupName);\n        uplinkDataList.add(gatewayInfoMsg);\n    }\n}\n\nreturn uplinkDataList;\n\nfunction addAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName) {\n    if (customerName != null) {\n        deviceInfo.customerName = customerName;\n    }\n    if (groupName != null) {\n        deviceInfo.groupName = groupName;\n    }\n}\n\nfunction processTelemetryData(telemetry, addDataToTelemetry) {\n    if (telemetry.size >= 1) {\n        telemetry = addDataToTelemetries(telemetry, addDataToTelemetry);\n    }\n    else {\n        telemetry.add(addDataToTelemetry);\n    }\n    \n    return telemetry;\n}\n\nfunction addDataToTelemetries(telemetries, addDataToTelemetry) {\n    foreach(telemetry : telemetries) {\n        foreach(element : addDataToTelemetry.entrySet()) {\n            if(!telemetry[\"values\"].keys.contains(element.key)) {\n                telemetry[\"values\"][element.key] = element.value;\n            }\n        } \n    }\n    \n    return telemetries;\n}\n\nfunction getEnableStatus(bit) {\n    var enableResult = \"Invalid\";\n    \n    switch (bit) {\n\t\tcase 0:\n\t\t    enableResult = \"Disable\";\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tenableResult = \"Enable\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tenableResult = \"Invalid\";\n\t}\n    \n    return enableResult;\n}\n\nfunction getOnOffStatus(bit) {\n    var reportResult = \"Invalid\";\n    \n    switch (bit) {\n        case 0:\n            reportResult = \"Off\";\n            break;\n        case 1:\n            reportResult = \"On\";\n            break;\n        default:\n            reportResult = \"Invalid\";\n    }\n    \n    return reportResult;\n}",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "fPort",
      "ack",
      "eui",
      "frequency",
      "dr",
      "battery"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}