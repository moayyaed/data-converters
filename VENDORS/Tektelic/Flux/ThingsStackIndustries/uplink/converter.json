{
  "name": "Things Stack Industries Uplink Converter for Tektelic Flux",
  "type": "UPLINK",
  "debugMode": false,
  "debugSettings": {
    "failuresEnabled": true,
    "allEnabled": false,
    "allEnabledUntil": 1733331880270
  },
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": null,
    "tbelDecoder": "var data = decodeToJson(payload);\n\nvar deviceName = data.end_device_ids.device_id;\nvar deviceType = \"Flux\";\nvar groupName = null; // If groupName is not null - created device will be added to the entity group with such name.\nvar customerName = null; // If customerName is not null - created devices will be assigned to customer with such name. \n\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// If you want to parse incoming data somehow, you can add your code to this function.\n// input: bytes\n// expected output:\n//  {\n//    \"attributes\": {\"attributeKey\": \"attributeValue\"},\n//    \"telemetry\": [{\"ts\": 1...1, \"values\": {\"telemetryKey\":\"telemetryValue\"}, {\"ts\": 1...2, \"values\":                      {\"telemetryKey\":\"telemetryValue\"}}]\n//  }\n\nfunction decodeFrmPayload(input) {\n    var output = { attributes: {}, telemetry: []};\n    \n    // --- Decoding code --- //\n    var decoded = {};\n    var fPort = data.uplink_message.f_port;\n    if(fPort == 10) {\n        for(var i = 0; i < input.length - 2; ) {\n            var key_1 = input[i++] & 0xff;\n            var key_2 = input[i++] & 0xff;\n            \n            if(key_1 == 0x00 && key_2 == 0xFE) {\n                decoded.energy_consumption_meter_elapsed = parseBytesToInt(input, i, 4);\n                decoded.energy_consumption_meter_consumed = parseBytesToInt(input, i + 4, 4);\n                i += 8;\n            }\n            else if(key_1 == 0x00 && key_2 == 0x00) {\n                decoded.energy_consumption_meter_status = parseBytesToInt(input, i, 1);\n                if(decoded.energy_consumption_meter_status != 0) {\n                    decoded.energy_consumption_meter_status != 1;\n                }\n            }\n            else if(key_1 == 0x00 && key_2 == 0x74) {\n                decoded.voltmeter = (input[i] << 8) | (input[i + 1] & 0xFF);\n                if (decoded.voltmeter != 65535) {\n                        decoded.voltmeter = decoded.voltmeter * 10;\n                }\n                \n                i += 2;\n            }\n            else if(key_1 == 0x00 && key_2 == 0x75) {\n                decoded.voltmeter = (input[i] << 8) | (input[i + 1] & 0xFF);\n                if (decoded.ammeter  != 65535) {\n                        decoded.ammeter  = decoded.ammeter  * 10;\n                }\n                \n                i += 2;\n            }\n            else if(key_1 == 0x00 && key_2 == 0x80) {\n                decoded.real_power = (input[i] << 8) | (input[i + 1] & 0xFF);\n                if (decoded.real_power  != 65535) {\n                        decoded.real_power  = decoded.real_power  * 10;\n                }\n                \n                i += 2;\n            }\n            else if(key_1 == 0x01 && key_2 == 0x80) {\n                decoded.apparent_power = (input[i] << 8) | (input[i + 1] & 0xFF);\n                if (decoded.apparent_power  != 65535) {\n                        decoded.apparent_power  = decoded.apparent_power  * 10;\n                }\n                \n                i += 2;\n            }\n            else if(key_1 == 0x00 && key_2 == 0x81) {\n                decoded.power_factor_meter = input[i] & 0xFF;\n                if (decoded.power_factor_meter  != 65535) {\n                        decoded.power_factor_meter  = decoded.power_factor_meter  * 100;\n                }\n                \n                i += 1;\n            }\n            else if(key_1 == 0x00 && key_2 == 0x01) {\n                decoded.relay_status = input[i] & 0xFF;\n                \n                if (decoded.relay_status != 0) {\n                        decoded.relay_status = 1;\n                }\n                \n                i += 1;\n            }\n        }\n    }\n    else if (fPort == 100) {\n        for(var i = 0; i < input.length -1; ) {\n            var key = input[i++] & 0xff;\n            \n            if(key == 0x00) {\n                output.attributes.eui = bytesToHex(java.util.Arrays.copyRange(input, i, i + 8));\n                i += 8;\n            }\n            else if(key == 0x01) {\n                output.attributes.app_eui = bytesToHex(java.util.Arrays.copyRange(input, i, i + 8));\n\t\t\t\ti += 8;\n            }\n            else if (key == 0x02) {\n                output.attributes.app_key = bytesToHex(java.util.Arrays.copyRange(input, i, i + 16));\n                i += 16;\n            }\n            else if (key == 0x03) {\n                output.attributes.devAddr = bytesToHex(java.util.Arrays.copyRange(input, i, i + 4));\n                i += 4;\n            }\n            else if(key == 0x04) {\n                output.attributes.network_session_key = bytesToHex(java.util.Arrays.copyRange(input, i, i + 16));\n                i += 16;\n            }\n            else if(key == 0x05) {\n                output.attributes.app_session_key = bytesToHex(java.util.Arrays.copyRange(input, i, i + 16));\n                i += 16;\n            }\n            else if(key == 0x10) {\n                output.attributes.loramac_join_mode = (input[i] >> 7) & 1;\n                i += 2;\n            }\n            else if (key == 0x11) {\n                var val = (input[i] >> 4) & 0x0F;\n                \n                if(val == 0x0C) {\n                    output.attributes.lora_class = \"Class C\";\n                }\n                else if(val == 0x0B) {\n                    output.attributes.lora_class = \"Class B\";\n                }\n                else if(val == 0x0A) {\n                    output.attributes.lora_class = \"Class F\";\n                }\n                else {\n                    output.attributes.lora_class = \"Invalid\";\n                }\n\t\t\t\t\n\t\t\t\toutput.attributes.confirm_mode = (input[i] >> 8) & 1; \n\t\t\t\toutput.attributes.sync_word = (input[i] >> 9) & 1;\n\t\t\t\toutput.attributes.duty_cycle = (input[i] >> 10) & 1;\n\t\t\t\toutput.attributes.adr = (input[i] >> 11) & 1; \n\t\t\t\t\n\t\t\t\ti += 2;\n            }\n            else if (key == 0x12) {\n                output.attributes.dr_number = (((input[i] << 8) | input[i + 1]) >> 8) & 0xF;\n                output.attributes.tx_power_number = ((input[i] << 8) | input[i + 1]) & 0xF;\n                \n                i +=2;\n            }\n            else if (key == 0x13) {\n                output.attributes.frequency = (((input[i] << 32) | (input[i + 1] << 24) | (input[i + 2] << 16) | (input[i + 3] << 8) | input[i + 4]) >> 8) & 0xFFFFFFFF;\n                output.attributes.dr_number_rx2 = input[i + 4] & 0xFF;\n                \n                i += 5;\n            }\n            else if(key == 0x19) {\n                output.attributes.netid_msb = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if (key == 0x20) {\n                output.attributes.seconds_per_core_tick = parseBytesToInt(input, i, 4);\n                i += 4;\n            }\n            else if(key == 0x21) {\n                output.attributes.tick_per_battery = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x71) {\n                output.attributes.app_major_version = input[i];\n\t\t\t\toutput.attributes.app_minor_version = input[i + 1];\n\t\t\t\toutput.attributes.app_revision = input[i + 2];\n\t\t\t\toutput.attributes.loramac_major_version = input[i + 3];\n\t\t\t\toutput.attributes.loramac_minor_version = input[i + 4];\n\t\t\t\toutput.attributes.loramac_revision = input[i + 5];\n\t\t\t\toutput.attributes.region = input[i + 7];\n\t\t\t\ti += 7;\n            }\n        }\n    }\n    \n    output.telemetry = [{\n        ts: timestamp,\n        values: decoded\n    }];\n\n    // --- Decoding code --- //\n    return output;\n}\n\n// --- attributes and telemetry objects ---\nvar telemetry = [];\nvar attributes = {};\n// --- attributes and telemetry objects ---\n\n// --- Timestamp parsing\nvar dateString = data.uplink_message.received_at;\n\nif ((data.simulated != null && data.simulated) || dateString == null) {\n    dateString = data.received_at;\n}\n\ntimestamp = parseDateToTimestamp(dateString);\n// --- Timestamp parsing\n\n// Message parsing\n// To avoid paths in the decoded objects we passing false value to function as \"pathInKey\" argument.\n// Warning: pathInKey can cause already found fields to be overwritten with the last value found, e.g. receive_at from uplink_message will be written receive_at in the root.\n\n// Passing incoming bytes to decodeFrmPayload function, to get custom decoding\nvar customDecoding = {};\nif (data.uplink_message.get(\"frm_payload\") != null) {\n    customDecoding = decodeFrmPayload(base64ToBytes(data.uplink_message.frm_payload));\n}\n\n// Collecting data to result\nif (customDecoding.?telemetry.size() > 0) {\n    if (customDecoding.telemetry instanceof java.util.ArrayList) {\n        foreach(telemetryObj: customDecoding.telemetry) {\n            if (telemetryObj.ts != null && telemetryObj.values != null) {\n                telemetry.add(telemetryObj);\n            }\n        }\n    } else {\n        telemetry.putAll(customDecoding.telemetry);\n    }\n}\n\nif (customDecoding.?attributes.size() > 0) {\n    attributes.putAll(customDecoding.attributes);\n}\n\n// You can add some keys manually to attributes or telemetry\nvar applicationId = data.end_device_ids.?application_ids.?application_id;\nvar devAddr = data.end_device_ids.?dev_addr;\nvar spreadingFactor = data.uplink_message.?settings.?data_rate.?lora.?spreading_factor;\nvar codeRate = data.uplink_message.?settings.?data_rate.?lora.?coding_rate;\nvar tenantId = data.uplink_message.?network_ids.?tenant_id;\nattributes.eui = data.end_device_ids.dev_eui;\nattributes.fPort = data.uplink_message.f_port;\nattributes.applicationId = applicationId;\nattributes.devAddr = devAddr;\nattributes.spreadingFactor = spreadingFactor;\nattributes.codeRate = codeRate;\nattributes.tenantId = tenantId;\nattributes.device_id = data.end_device_ids.?device_id;\nattributes.join_eui = data.end_device_ids.?join_eui;\nattributes.net_id = data.uplink_message.?network_ids.?net_id;\nattributes.cluster_id = data.uplink_message.?network_ids.?cluster_id;\nattributes.cluster_address = data.uplink_message.?network_ids.?cluster_address;\nattributes.bandwidth = data.uplink_message.?settings.?data_rate.?lora.?bandwidth;\nattributes.frequency = data.uplink_message.?settings.?frequency;\n\nvar isIncludeGatewayInfo = metadata[\"includeGatewayInfo\"];\nif(isIncludeGatewayInfo == true) {\n   var gatewayInfo = getGatewayInfo();\n   var addDataToTelemetry = {};\n   addDataToTelemetry.snr = gatewayInfo.snr;\n   addDataToTelemetry.rssi = gatewayInfo.rssi;\n   addDataToTelemetry.channel = gatewayInfo.channel_index;\n   addDataToTelemetry.consumed_airtime = data.uplink_message.?consumed_airtime;\n   addDataToTelemetry.fCnt = data.uplink_message.?f_cnt;\n\n   telemetry = processTelemetryData(telemetry, addDataToTelemetry);\n}\n\nvar result = {\n    deviceName: deviceName,\n    deviceType: deviceType,\n    //  assetName: assetName,\n    //  assetType: assetType,\n    attributes: attributes,\n    telemetry: telemetry\n};\n\naddAdditionalInfoForDeviceMsg(result, customerName, groupName);\n\nreturn result;\n\nfunction addAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName) {\n    if (customerName != null) {\n        deviceInfo.customerName = customerName;\n    }\n    if (groupName != null) {\n        deviceInfo.groupName = groupName;\n    }\n}\n\nfunction parseDateToTimestamp(dateString) {\n    var date = new Date(dateString);\n    var timestamp = date.getTime();\n   \n    // If we cannot parse timestamp - we will use the current timestamp\n    if (timestamp == -1) {\n        timestamp = Date.now();\n    }\n    \n    return timestamp;\n}\n\nfunction getGatewayInfo() {\n    var gatewayList = data.uplink_message.?rx_metadata;\n    var maxRssi = Integer. MIN_VALUE;\n    var gatewayInfo = {};\n    \n    foreach (gateway : gatewayList) {\n        if(gateway.rssi > maxRssi) {\n            maxRssi = gateway.rssi;\n            gatewayInfo = gateway;\n        }\n    }\n    \n    return gatewayInfo;\n}\n\nfunction processTelemetryData(telemetry, addDataToTelemetry) {\n    if (telemetry.size >= 1) {\n        telemetry = addDataToTelemetries(telemetry, addDataToTelemetry);\n    }\n    else {\n        telemetry.add(addDataToTelemetry);\n    }\n    \n    return telemetry;\n}\n\nfunction addDataToTelemetries(telemetries, addDataToTelemetry) {\n    foreach(telemetry : telemetries) {\n        foreach(element : addDataToTelemetry.entrySet()) {\n            if(!telemetry[\"values\"].keys.contains(element.key)) {\n                telemetry[\"values\"][element.key] = element.value;\n            }\n        } \n    }\n    \n    return telemetries;\n}",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "fPort",
      "bandwidth",
      "frequency",
      "net_id",
      "cluster_id",
      "cluster_address",
      "tenant_address",
      "device_id",
      "join_eui",
      "eui",
      "channel",
      "devAddr",
      "spreadingFactor",
      "codeRate",
      "tenantId",
      "applicationId",
      "battery"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}