{
  "name": "Loriot Uplink Converter for Tektelic Kiwi",
  "type": "UPLINK",
  "debugMode": false,
  "debugSettings": {
    "failuresEnabled": true,
    "allEnabled": false,
    "allEnabledUntil": 1733331880270
  },
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
    "tbelDecoder": "var data = decodeToJson(payload);\nvar deviceName = data.EUI;\nvar deviceType = \"Kiwi\";\nvar groupName = null; // If groupName is not null - created device will be added to the entity group with such name.\nvar customerName = null; // If customerName is not null - created devices will be assigned to customer with such name. \n\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// If you want to parse incoming data somehow, you can add your code to this function.\n// input: bytes\n// expected output:\n//  {\n//    \"attributes\": {\"attributeKey\": \"attributeValue\"},\n//    \"telemetry\": {\"telemetryKey\": \"telemetryValue\"}\n//  }\n\nfunction decodePayload(input) {\n    var output = { attributes: {}, telemetry: []};\n    \n    var decoded = {};\n    var fPort = data.port;\n    if(fPort == 10) {\n        for(var i = 0; i < input.length - 2; ) {\n            var key_1 = input[i++] & 0xff;\n            var key_2 = input[i++] & 0xff;\n            \n            if(key_1 == 0x00 && key_2 == 0xBA) {\n                var val = (input[i] >> 7) & 1; \n\n                decoded.eos_alert = getAlarmStatus(val);\n                var battery_bits = input[i] & 0x7F;\n                decoded.battery_voltage = roundUsingMathRound(battery_bits * 0.01 + 2.5, 2);\n                i += 1;\n            }\n            else if(key_1 == 0x00 && key_2 == 0xD3) {\n                decoded.rem_batt_capacity = parseBytesToInt(input, i, 1);\n                i += 1;\n            }\n            else if(key_1 == 0x00 && key_2 == 0xBD) {\n                decoded.rem_batt_days = parseBytesToInt(input, i, 2);\n\t\t\t\ti += 2;\n            }\n            else if(key_1 == 0x01 && key_2 == 0x04) {\n                var value = parseBytesToInt(input, i, 2);\n                var frequencyMoisture = 0;\n\t\t\t\tif (value > 1399){\n\t\t\t\t\tfrequencyMoisture = \"Dry\";\n\t\t\t\t} else if (value > 1396 && value <= 1399){\n\t\t\t\t\tfrequencyMoisture = 0.1;\n\t\t\t\t} else if (value > 1391 && value <= 1396){\n\t\t\t\t\tfrequencyMoisture = 0.2;\n\t\t\t\t} else if (value > 1386 && value <= 1391){\n\t\t\t\t\tfrequencyMoisture = 0.3;\n\t\t\t\t} else if (value > 1381 && value <= 1386){\n\t\t\t\t\tfrequencyMoisture = 0.4;\n\t\t\t\t} else if (value > 1376 && value <= 1381){\n\t\t\t\t\tfrequencyMoisture = 0.5;\n\t\t\t\t} else if (value > 1371 && value <= 1376){\n\t\t\t\t\tfrequencyMoisture = 0.6;\n\t\t\t\t} else if (value > 1366 && value <= 1371){\n\t\t\t\t\tfrequencyMoisture = 0.7;\n\t\t\t\t} else if (value > 1361 && value <= 1366){\n\t\t\t\t\tfrequencyMoisture = 0.8;\n\t\t\t\t} else if (value > 1356 && value <= 1361){\n\t\t\t\t\tfrequencyMoisture = 0.9;\n\t\t\t\t} else if (value > 1351 && value <= 1356){\n\t\t\t\t\tfrequencyMoisture = 1.0;\n\t\t\t\t} else if (value > 1346 && value <= 1351){\n\t\t\t\t\tfrequencyMoisture = 1.1;\n\t\t\t\t} else if (value > 1341 && value <= 1346){\n\t\t\t\t\tfrequencyMoisture = 1.2;\n\t\t\t\t} else {\n\t\t\t\t\tfrequencyMoisture = \"Wet\";\n\t\t\t\t}\n\t\t\t\tdecoded.input1_frequency_to_moisture = frequencyMoisture;\n\t\t\t\tdecoded.input1_frequency = value;\n\t\t\t\ti += 2;\n            }\n            else if (key_1 == 0x02 && key_2 == 0x02) {\n                var voltageValue = parseBytesToInt(input, i, 2) * 0.001;\n\t\t\t\tvar voltageTempOutput = -32.46 * Math.log(voltageValue * 1000) + 236.36;\n\t\t\t\tdecoded.input2_voltage_to_temp = roundUsingMathRound(voltageTempOutput, 1);\n\t\t\t\tdecoded.input2_voltage = voltageValue;\n\t\t\t\ti += 2;\n            }\n            else if (key1 == 0x03 && key2 == 0x02) {\n                var input3Voltage = parseBytesToInt(input, i, 2) * 0.001;\n                \n                decoded.input3_voltage = input3Voltage;\n\t\t\t\tdecoded.input3_voltage_to_temp = roundUsingMathRound((-33.01 * Math.pow(input3Voltage, 5)) + (217.4 * Math.pow(input3Voltage, 4)) + (-538.6 * Math.pow(input3Voltage, 3)) + (628.1 * Math.pow(input3Voltage, 2)) + (-378.9 * input3Voltage) + 102.9, 1);\n                \n                i += 2;\n            }\n            else if (key1 == 0x03 && key2 == 0x67) {\n                decoded.input3_temperature = parseBytesToInt(input, i, 2) * 0.1;\n\t\t\t\ti += 2;\n            }\n            else if (key1 == 0x04 && key2 == 0x02) {\n                var input4Voltage = parseBytesToInt(input, i, 2) * 0.001;\n                \n                decoded.input4_voltage = input4Voltage;\n\t\t\t\tdecodedinput4_voltage_to_temp = roundUsingMathRound((-33.01 * Math.pow(input4Voltage, 5)) + (217.4 * Math.pow(input4Voltage, 4)) + (-538.6 * Math.pow(input4Voltage, 3)) + (628.1 * Math.pow(input4Voltage, 2)) + (-378.9 * input4Voltage) + 102.9, 1);\n                \n                i += 2;\n            }\n            else if (key1 == 0x04 && key2 == 0x67) {\n                decoded.input4_temperature = parseBytesToInt(input, i, 2) * 0.1;\n\t\t\t\ti += 2;\n            }\n            else if (key1 == 0x05 && key2 == 0x04) {\n                var watermark1Frequency = parseBytesToInt(input, i, 2);\n\t\t\t\t\n\t\t\t\tvar decodedWatermarkData1 = getWatermarkData(watermark1Frequency);\t\n\t\t\t\tdecoded.watermark1_tension = decodedWatermarkData1.watermarkTension;\n\t\t\t\tdecoded.watermark1_frequency = decodedWatermarkData1.watermarkFrequency;\n\t\t\t\t\n\t\t\t\ti += 2;\n            }\n            else if (key1 == 0x06 && key2 == 0x04) {\n                var watermark2Frequency = parseBytesToInt(input, i, 2);\n\t\t\t\t\n\t\t\t\tvar decodedWatermarkData2 = getWatermarkData(watermark2Frequency);\t\n\t\t\t\tdecoded.watermark2_tension = decodedWatermarkData2.watermarkTension;\n\t\t\t\tdecoded.watermark2_frequency = decodedWatermarkData2.watermarkFrequency;\n\t\t\t\t\n\t\t\t\ti += 2;\n            }\n            else if (key1 == 0x09 && key2 == 0x65) {\n                var lightIntensity = parseBytesToInt(input, i, 2);\n\t\t\t\t\n\t\t\t\tdecoded.light_intensity = lightIntensity; \n\t\t\t\ti += 2;\n            }\n            else if (key1 == 0x09 && key2 == 0x00) {\n                var lightDetected = parseBytesToInt(input, i, 1);\n\t\t\t\tdecoded.light_detected = getAlarmStatus(lightDetected);\n\t\t\t\t\n\t\t\t\ti += 1;\n            }\n            else if (key1 == 0x0A && key2 == 0x71) {\n                decoded.accelerationX = parseBytesToInt(input, i, 2);\n                decoded.accelerationY = parseBytesToInt(input, i + 2, 2);\n                decoded.accelerationZ = parseBytesToInt(input, i + 4, 2);\n            }\n            else if (key1 == 0x0A && key2 == 0x00) {\n               var orientationAlarm = parseBytesToInt(input, i, 1);\n               decoded.orientation_alarm = getAlarmStatus(orientationAlarm);\n\t\t\t\t\n\t\t\t\ti += 1;\n            }\n            else if (key1 == 0x0B && key2 == 0x67) {\n                decoded.ambient_temperature = parseBytesToInt(input, i, 2) * 0.1;\n                i += 2;\n            }\n            else if (key1 == 0x0B && key2 == 0x68) {\n                decoded.relative_humidity = parseBytesToInt(input, i, 1) * 0.5;\n                i += 1;\n            }\n            else if (key1 == 0x0C && key2 == 0x67) {\n                decoded.mcu_temperature = parseBytesToInt(input, i, 2) * 0.1;\n                i += 2;\n            }\n            else if (key1 == 0x0D && key2 == 0x73) {\n                decoded.RFU_2 = parseBytesToInt(input, i, 1) * 0.1;\n                i += 1;\n            }\n        }\n    }\n    else if (fPort == 100) {\n        for(var i = 0; i < input.length -1; ) {\n            var key = input[i++] & 0xff;\n            \n            if(key == 0x10) {\n                var val = (((input[i] << 8) | input[i + 1]) >> 15) & 1;\n                switch (val){\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\toutput.attributes.loramac_join_mode = \"ABP\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\toutput.attributes.loramac_join_mode = \"OTAA\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\toutput.attributes.loramac_join_mode = \"Invalid\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ti += 1;\n            }\n            else if (key == 0x11) {\n                var val = (((input[i] << 8) | input[i + 1]) >> 12) & 0xF;\n                switch (val) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\toutput.attributes.deviceClassEnabled = \"Class A\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 12:\n\t\t\t\t\t\toutput.attributes.deviceClassEnabled = \"Class C\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\toutput.attributes.deviceClassEnabled = \"Invalid\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar val = (((input[i] << 8) | input[i + 1]) >> 3) & 1;\n\t\t\t\toutput.attributes.adr = getEnableStatus(val);\n\t\t\t\t\n\t\t\t\tvar val = (((input[i] << 8) | input[i + 1]) >> 2) & 1;\n\t\t\t\toutput.attributes.duty_cycle = getEnableStatus(val);\n\t\t\t\t\n\t\t\t\tvar val = (((input[i] << 8) | input[i + 1]) >> 1) & 1;\n\t\t\t\t\n\t\t\t\tswitch (val) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\toutput.attributes.sync_word = \"Private\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\toutput.attributes.sync_word = \"Public\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\toutput.attributes.sync_word = \"Invalid\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar val = ((input[i] << 8) | input[i + 1]) & 1;\n\t\t\t\t\n\t\t\t\tswitch (val){\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\toutput.attributes.confirm_mode = \"Unconfirmed\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\toutput.attributes.confirm_mode = \"Confirmed\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t    output.attributes.confirm_mode = \"Invalid\";\n\t\t\t\t}\n\t\t\t\ti += 2;\n            }\n            else if (key == 0x12) {\n                output.attributes.dr_number = (((input[i] << 8) | input[i + 1]) >> 8) & 0xF;\n                output.attributes.tx_power_number = ((input[i] << 8) | input[i + 1]) & 0xF;\n                \n                i +=2;\n            }\n            else if (key == 0x13) {\n                output.attributes.frequency = (((input[i] << 32) | (input[i + 1] << 24) | (input[i + 2] << 16) | (input[i + 3] << 8) | input[i + 4]) >> 8) & 0xFFFFFFFF;\n                output.attributes.dr_number_rx2 = input[i + 4] & 0xFF;\n                \n                i += 5;\n            }\n            else if (key == 0x20) {\n                output.attributes.seconds_per_core_tick = parseBytesToInt(input, i, 4);\n                i += 4;\n            }\n            else if(key == 0x21) {\n                output.attributes.tick_per_battery = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x22) {\n                output.attributes.tick_per_ambient_temperature = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x23) {\n                output.attributes.tick_per_relative_humidity = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x24) {\n                output.attributes.tick_per_light = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x25) {\n                output.attributes.tick_per_input1 = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x26) {\n                output.attributes.tick_per_input2 = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x27) {\n                output.attributes.tick_per_input3 = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n             else if(key == 0x28) {\n                output.attributes.tick_per_input4 = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n             else if(key == 0x29) {\n                output.attributes.tick_per_watermark1 = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n             else if(key == 0x2A) {\n                output.attributes.tick_per_watermark2 = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x2C) {\n                output.attributes.tick_per_accelerometer = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x2D) {\n                output.attributes.tick_per_orientation_alarm = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x2E) {\n                output.attributes.tick_per_mcu_temperature = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x2F) {\n                output.attributes.RFU_1 = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x30) {\n                output.attributes.temperature_relative_humidity_idle = parseBytesToInt(input, i, 4);\n                i += 4;\n            }\n            else if(key == 0x31) {\n                output.attributes.temperature_relative_humidity_active = parseBytesToInt(input, i, 4);\n                i += 4;\n            }\n            else if(key == 0x32) {\n                output.attributes.high_ambient_temp_raw = (((input[i] << 8) | input[i + 1]) >> 8) & 0xFF;\n                output.attributes.low_ambient_temp_raw = ((input[i] << 8) | input[i + 1]) & 0xFF;\n                \n                i += 2;\n            }\n            else if(key == 0x33) {\n                var val = input[i] & 1;\n                output.attributes.ambient_temperature_threshold_enabled = getEnableStatus(val);\n\t\t\t\t\n\t\t\t\ti += 1;\n            }\n            else if (key == 0x34) {\n                output.attributes.high_rh = input[i];\n\t\t\t\toutput.attributes.low_rh = input[i + 1];\n\t\t\t\t\n\t\t\t\ti += 2;\n            }\n            else if (key == 0x35) {\n                var val = input[i] & 1;\n                output.attributes.relative_humidity_threshold_enabled = getEnableStatus(val);\n\t\t\t\t\n\t\t\t\ti += 1;\n            }\n            else if (key == 0x36) {\n                output.attributes.input_sample_period_idle  = parseBytesToInt(input, i, 4);\n                i += 4;\n            }\n            else if (key == 0x37) {\n                output.attributes.input_sample_period_active = parseBytesToInt(input, i, 4);\n                i += 4;\n            }\n            else if (key == 0x38) {\n                output.attributes.low_input1 = parseBytesToInt(input, i, 2);\n                output.attributes.high_input1 = parseBytesToInt(input, i + 2, 2);\n                \n                i += 4;\n            }\n            else if (key == 0x39) {\n                output.attributes.low_input2 = parseBytesToInt(input, i, 2);\n                output.attributes.high_input2 = parseBytesToInt(input, i + 2, 2);\n                \n                i += 4;\n            }\n            else if (key == 0x3A) {\n                output.attributes.low_input3 = parseBytesToInt(input, i, 2);\n                output.attributes.high_input3 = parseBytesToInt(input, i + 2, 2);\n                \n                i += 4;\n            }\n            else if (key == 0x3B) {\n                output.attributes.low_input4 = parseBytesToInt(input, i, 2);\n                output.attributes.high_input4 = parseBytesToInt(input, i + 2, 2);\n                \n                i += 4;\n            }\n            else if (key == 0x3C) {\n                output.attributes.low_watermark1 = parseBytesToInt(input, i, 2);\n                output.attributes.high_watermark1 = parseBytesToInt(input, i + 2, 2);\n                \n                i += 4;\n            }\n            else if (key == 0x3D) {\n                output.attributes.low_watermark2 = parseBytesToInt(input, i, 2);\n                output.attributes.high_watermark2 = parseBytesToInt(input, i + 2, 2);\n                \n                i += 4;\n            }\n            else if (key == 0x3F) {\n                var input_status = input[i] & 0x3F;\n                \n                var bit0 = (input_status >> 0) & 1;\n                output.attributes.input_enable_input1 = getEnableStatus(bit0);\n                \n                var bit1 = (input_status >> 1) & 1;\n                 output.attributes.input_enable_input2 = getEnableStatus(bit1);\n                \n                var bit2 = (input_status >> 2) & 1;\n                output.attributes.input_enable_input3 = getEnableStatus(bit2);\n                \n                var bit3 = (input_status >> 3) & 1;\n                output.attributes.input_enable_input4 = getEnableStatus(bit3);\n                \n                var bit4 = (input_status >> 4) & 1;\n                output.attributes.input_enable_watermark1_enable = getEnableStatus(bit4);\n                \n                var bit5 = (input_status >> 5) & 1;\n                output.attributes.input_enable_watermark2_enable = getEnableStatus(bit5);\n                \n                i += 1;\n            }\n            else if (key == 0x40) {\n                output.attributes.mcu_temperature_sample_period_idle = parseBytesToInt(input, i, 4);\n                i += 4;\n            }\n            else if (key == 0x41) {\n                output.attributes.mcu_temperature_sample_period_active = parseBytesToInt(input, i, 4);\n                i += 4;\n            }\n            else if (key == 0x42) {\n                output.attributes.high_mcu_temp = input[i + 1];\n                output.attributes.low_mcu_temp = input[i];\n                i += 4;\n            }\n            else if (key == 0x43) {\n                var val = input[i] & 1;\n                output.attributes.mcu_temperature_enable = getEnableStatus(val);\n\n\t\t\t\ti += 2;\n            }\n            else if (key == 0x44) {\n                output.attributes.low_input3_onewire = parseBytesToInt(input, i, 2);\n                output.attributes.high_input3_onewire = parseBytesToInt(input, i + 2, 2);\n                i += 2;\n            }\n            else if (key == 0x45) {\n                output.attributes.low_input4_onewire = parseBytesToInt(input, i, 2);\n                output.attributes.high_input4_onewire = parseBytesToInt(input, i + 2, 2);\n                i += 2;\n            }\n            else if (key == 0x48 ) {\n                var val = input[i] & 1;\n                output.attributes.ALS_interrupt_enabled = getEnableStatus(val);\n                \n                i += 1;\n            }\n            else if (key == 0x49) {\n                output.attributes.ALS_upper_threshold = parseBytesToInt(input, i, 2);\n                i +=2;\n            }\n            else if (key == 0x4A) {\n                output.attributes.ALS_lower_threshold = parseBytesToInt(input, i, 2);\n                i +=2;\n            }\n            else if (key == 0x4B) {\n                output.attributes.light_sample_period_idle = parseBytesToInt(input, i, 4);\n                i +=4;\n            }\n            else if (key == 0x4C) {\n                output.attributes.light_sample_period_active = parseBytesToInt(input, i, 4);\n                i +=4;\n            }\n            else if (key == 0x4D) {\n                var status = input[i] & 0x03;\n                \n                var bit1 = status & 1;\n                output.attributes.light_alarm_reported = getReportStatus(bit1);\n                \n                var bit2 = (status >> 1) & 1;\n                output.attributes.light_intensity_reported = getReportStatus(bit2);\n                \n                i += 1;\n            }\n            else if (key == 0x50) {\n                output.attributes.orientation_alarm_threshold = parseBytesToInt(input, i, 2);\n                i += 2;\n            }\n            else if(key == 0x51) {\n                var status = input[i];\n\n                var bit5 = (status >> 5) & 1;\n                output.attributes.orientation_vector_report = getReportStatus(bit5);\n                \n                var bit0 = status & 1;        \n                output.attributes.orientation_alarm_report = getReportStatus(bit0);\n            \n                i += 1;\n            }\n            else if (key == 0x52) {\n                var status = input[i]; \n                \n                var bit7 = (status >> 7) & 1; \n                var bit0 = status & 1; \n                \n                switch (bit7) {\n                    case 0:\n                        output.attributes.accelerometer_power_on = \"Off\";\n                        break;\n                    case 1:\n                        output.attributes.accelerometer_power_on = \"On\";\n                        break;\n                    default:\n                        output.attributes.accelerometer_power_on = \"Invalid\";\n                }\n                \n                output.attributes.orientation_alarm_mode = getEnableStatus(bit0);\n                \n                i += 1;\n            }\n            else if (key == 0x61) {\n                var status = input[i]; \n                \n                var bit1 = (status >> 1) & 1;\n                output.attributes.report_capacity_enabled = getEnableStatus(bit1);\n                \n                var bit2 = (status >> 2) & 1;\n                output.attributes.report_lifetime_enabled = getEnableStatus(bit2);\n            \n                i += 1;\n            }\n            else if (key == 0x62) {\n                output.attributes.avg_current_window = parseBytesToInt(input, i, 1);\n                i += 1;\n            }\n            else if (key == 0x71) {\n                output.attributes.app_major_version = input[i + 6];\n\t\t\t\toutput.attributes.app_minor_version = input[i + 5];\n\t\t\t\toutput.attributes.app_revision = input[i + 4];\n\t\t\t\toutput.attributes.loramac_major_version = input[i + 3];\n\t\t\t\toutput.attributes.loramac_minor_version = input[i + 2];\n\t\t\t\toutput.attributes.loramac_revision = input[i + 1];\n\t\t\t\tvar val = input[i];\n\t\t\t\tswitch (val){\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\toutput.attributes.region = \"EU868\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\toutput.attributes.region = \"US915\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\toutput.attributes.region = \"AS923\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\toutput.attributes.region = \"AU915\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\toutput.attributes.region = \"IN865\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\toutput.attributes.region = \"KR920\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\toutput.attributes.region = \"RU864\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\toutput.attributes.region = \"Invalid\";\n\t\t\t\t}\n\t\t\t\ti += 7;\n            }\n        }\n    }\n    else if (fPort == 101) {\n        var size = input.length;\n        var responses = [];\n    \n        var index = 0;\n        while (index < size) {\n            var downlinkFcnt = input[index++] & 0xFF; \n            var numInvalidWrites = input[index++] & 0xFF; \n    \n            if (numInvalidWrites > 0) {\n                var invalidRegisters = [];\n                for (var i = 0; i < numInvalidWrites; i++) {\n                    invalidRegisters.add(String.format(\"0x%02X\", input[index + i]));\n                }\n                index += numInvalidWrites;\n    \n                responses.add(String.format(\n                    \"%d Invalid write command(s) from DL:%d for register(s): %s\",\n                    numInvalidWrites, downlinkFcnt, String.join(\", \", invalidRegisters)\n                ));\n            } else {\n                responses.add(String.format(\"All write commands from DL:%d were successful\", downlinkFcnt));\n            }\n        }\n        \n        decoded.response = responses;\n    }\n        \n    output.telemetry = [{\n        ts: timestamp,\n        values: decoded\n    }];\n\n    // --- Decoding code --- //\n    return output;\n}\n\n// --- attributes and telemetry objects ---\nvar telemetry = [];\nvar attributes = {};\n// --- attributes and telemetry objects ---\n\n// --- Timestamp parsing\ntimestamp = data.ts;\n// --- Timestamp parsing\n\n// Message parsing\n// To avoid paths in the decoded objects we passing false value to function as \"pathInKey\" argument.\n// Warning: pathInKey can cause already found fields to be overwritten with the last value found.\n\nvar uplinkDataList = [];\n\n// Passing incoming bytes to decodePayload function, to get custom decoding\nvar customDecoding = decodePayload(hexToBytes(data.data));\n\n// Collecting data to result\nif (customDecoding.?telemetry.size() > 0) {\n    if (customDecoding.telemetry instanceof java.util.ArrayList) {\n        foreach(telemetryObj: customDecoding.telemetry) {\n            if (telemetryObj.ts != null && telemetryObj.values != null) {\n                telemetry.add(telemetryObj);\n            }\n        }\n    } else {\n        telemetry.putAll(customDecoding.telemetry);\n    }\n}\n\nif (customDecoding.?attributes.size() > 0) {\n    attributes.putAll(customDecoding.attributes);\n}\n\n// You can add some keys manually to attributes or telemetry\nattributes.eui = data.EUI;\nattributes.fPort = data.port;\nattributes.frequency = data.freq;\n\nvar isIncludeGatewayInfo = metadata[\"includeGatewayInfo\"];\nif(isIncludeGatewayInfo == true) {\n    var addDataToTelemetry = {};\n    addDataToTelemetry.rssi = data.rssi;\n    addDataToTelemetry.seqno = data.seqno;\n    addDataToTelemetry.snr = data.snr;\n    addDataToTelemetry.ack = data.ack;\n    addDataToTelemetry.toa = data.toa;\n    addDataToTelemetry.fCnt = data.fcnt;\n    \n   telemetry = processTelemetryData(telemetry, addDataToTelemetry);\n}\n\nvar deviceInfo = {\n    deviceName: deviceName,\n    deviceType: deviceType,\n//  assetName: assetName,\n//  assetType: assetType,\n    attributes: attributes,\n    telemetry: telemetry, \n};\n\naddAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName);\n\nuplinkDataList.add(deviceInfo);\n\nvar gatewayDeviceNamePrefix = \"Gateway \";\nvar gatewayDeviceType = \"Lora gateway\";\nvar gatewayGroupName = null; // If gatewayGroupName is not null - created device will be added to the entity group with such name.\n\nif (data.cmd == \"gw\") {\n    foreach( gatewayInfo : data.gws ) {\n        var addGatewayInfo = {};\n\n        // You can add some keys manually telemetry\n        addGatewayInfo.rssi = gatewayInfo.rssi;\n        addGatewayInfo.snr = gatewayInfo.snr;\n        // You can add some keys manually telemetry\n        \n        var gatewayInfoMsg = {\n            deviceName: gatewayDeviceNamePrefix + gatewayInfo.gweui,\n            deviceType: gatewayDeviceType,\n            telemetry: [{\n                \"ts\": gatewayInfo.ts,\n                \"values\": addGatewayInfo\n            }],\n            attributes: {\n                eui: gatewayInfo.gweui\n            }\n        };\n        addAdditionalInfoForDeviceMsg(gatewayInfoMsg, customerName, gatewayGroupName);\n        uplinkDataList.add(gatewayInfoMsg);\n    }\n}\n\nreturn uplinkDataList;\n\nfunction addAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName) {\n    if (customerName != null) {\n        deviceInfo.customerName = customerName;\n    }\n    if (groupName != null) {\n        deviceInfo.groupName = groupName;\n    }\n}\n\nfunction processTelemetryData(telemetry, addDataToTelemetry) {\n    if (telemetry.size >= 1) {\n        telemetry = addDataToTelemetries(telemetry, addDataToTelemetry);\n    }\n    else {\n        telemetry.add(addDataToTelemetry);\n    }\n    \n    return telemetry;\n}\n\nfunction addDataToTelemetries(telemetries, addDataToTelemetry) {\n    foreach(telemetry : telemetries) {\n        foreach(element : addDataToTelemetry.entrySet()) {\n            if(!telemetry[\"values\"].keys.contains(element.key)) {\n                telemetry[\"values\"][element.key] = element.value;\n            }\n        } \n    }\n    \n    return telemetries;\n}\n\nfunction getWatermarkData(watermarkFrequency) {\n    var decodedWatermark = {};\n    \n    var watermarkTension = 0;\n    if (watermarkFrequency > 6430){\n\t\twatermarkTension = 0;\n\t} else if (watermarkFrequency >= 4330 && watermarkFrequency <= 6430){\n\t    watermarkTension = 9.000 - (watermarkFrequency - 4330.000) * 0.004286;\n\t} else if (watermarkFrequency >= 2820 && watermarkFrequency < 4330){\n\t\twatermarkTension = 15.000 - (watermarkFrequency - 2820.000) * 0.003974;\n\t} else if (watermarkFrequency >= 1110 && watermarkFrequency < 2820){\n\t\twatermarkTension = 35.000 - (watermarkFrequency - 1110.000) * 0.01170;\n\t} else if (watermarkFrequency >= 770 && watermarkFrequency < 1110){\n\t\twatermarkTension = 55.000 - (watermarkFrequency - 770.000) * 0.05884;\n\t} else if (watermarkFrequency >= 600 && watermarkFrequency < 770){\n\t\twatermarkTension = 75.000 - (watermarkFrequency - 600.000) * 0.1176;\n\t} else if (watermarkFrequency >= 485 && watermarkFrequency < 600){\n\t\twatermarkTension = 100.000 - (watermarkFrequency - 485.000) * 0.2174;\n    } else if (watermarkFrequency >= 293 && watermarkFrequency < 485){\n\t\twatermarkTension = 200.000 - (watermarkFrequency - 293.000) * 0.5208;\n\t} else {\n\t    watermarkTension = 200;\n\t}\t\t\t\t\t\n\tdecodedWatermark.watermarkTension = roundUsingMathRound(watermarkTension, 0);\n\tdecodedWatermark.watermarkFrequency = watermarkFrequency;\n\t\t\t\t\n    return decodedWatermark;\n}\n\nfunction roundUsingMathRound(value, places) {\n    if (places >=  0) {\n        var factor = Math.pow(10, places);\n        return Math.round(value * factor) / factor;   \n    }\n    \n    return value;\n}\n\nfunction getAlarmStatus(bit) {\n    var alarmResult = \"Invalid\";\n    \n    if (bit === 0) {\n        alarmResult = \"No Alarm\";\n    } else if (bit === 1 || bit === 255) {\n        alarmResult = \"Alarm\";\n    } else {\n        alarmResult = \"Invalid\";\n    }\n    \n    return alarmResult;\n}\n\nfunction getEnableStatus(bit) {\n    var enableResult = \"Invalid\";\n    \n    switch (bit) {\n\t\tcase 0:\n\t\t    enableResult = \"Disable\";\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tenableResult = \"Enable\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tenableResult = \"Invalid\";\n\t}\n    \n    return enableResult;\n}\n\nfunction getReportStatus(bit) {\n    var reportResult = \"Invalid\";\n    \n    switch (bit5) {\n        case 0:\n            reportResult = \"Ignore\";\n            break;\n        case 1:\n            reportResult = \"Report\";\n            break;\n        default:\n            reportResult = \"Invalid\";\n    }\n    \n    return reportResult;\n}",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "fPort",
      "ack",
      "eui",
      "frequency",
      "dr",
      "battery"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}