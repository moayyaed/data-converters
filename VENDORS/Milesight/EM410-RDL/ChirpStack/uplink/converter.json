{
  "name": "Chirp Stack Uplink Converter for Milesight EM410-RDL",
  "type": "UPLINK",
  "debugMode": false,
  "debugSettings": {
    "failuresEnabled": true,
    "allEnabled": false,
    "allEnabledUntil": 1733331880270
  },
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": null,
    "tbelDecoder": "var data = decodeToJson(payload);\nvar deviceName = \"EM410-RDL \" + data.deviceInfo.devEui;\nvar deviceType = \"EM410-RDL\";\nvar groupName = null; // If groupName is not null - created device will be added to the entity group with such name.\nvar customerName = null; // If customerName is not null - created devices will be assigned to customer with such name. \n\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// If you want to parse incoming data somehow, you can add your code to this function.\n// input: bytes\n// expected output:\n//  {\n//    \"attributes\": {\"attributeKey\": \"attributeValue\"},\n//    \"telemetry\": [{\"ts\": 1...1, \"values\": {\"telemetryKey\":\"telemetryValue\"}, {\"ts\": 1...2, \"values\":                      {\"telemetryKey\":\"telemetryValue\"}}]\n//  }\n\nfunction decodePayload(input) {\n    var output = {\n        attributes: {},\n        telemetry: []\n    };\n    \n    // --- Decoding code --- //\n    var decoded = {};\n    var fPort = data.fPort;\n    var historyDataList = [];\n    if(fPort == 85) {\n        for(var i = 0; i < input.length - 2; ) {\n            var channel_id = input[i++] & 0xff;\n            var channel_type = input[i++] & 0xff;\n            \n            // DEVICE STATUS\n            if (channel_id === 0xff && channel_type === 0x0b) {\n                output.attributes.device_status = input[i];\n                i += 1;\n            }\n            // IPSO VERSION\n            else if (channel_id === 0xff && channel_type === 0x01) {\n                output.attributes.ipso_version = readProtocolVersion(input[i]);\n                i += 1;\n            }\n            // SERIAL NUMBER\n            else if (channel_id === 0xff && channel_type === 0x16) {\n                output.attributes.sn = readSerialNumber(java.util.Arrays.copyOfRange(input, i, i + 8));\n                i += 8;\n            }\n            // HARDWARE VERSION\n            else if (channel_id === 0xff && channel_type === 0x09) {\n                output.attributes.hardware_version = readHardwareVersion(java.util.Arrays.copyOfRange(input, i, i + 2));\n                i += 2;\n            }\n            // FIRMWARE VERSION\n            else if (channel_id === 0xff && channel_type === 0x0a) {\n                output.attributes.firmware_version = readFirmwareVersion(java.util.Arrays.copyOfRange(input, i, i + 2));\n                i += 2;\n            }\n            // LORAWAN CLASS TYPE\n            else if (channel_id === 0xff && channel_type === 0x0f) {\n                output.attributes.lorawan_class = readLoRaWANClass(input[i]);\n                i += 1;\n            }\n            // TSL VERSION\n            else if (channel_id === 0xff && channel_type === 0xff) {\n                output.attributes.tsl_version = readTslVersion(java.util.Arrays.copyOfRange(input, i, i + 2));\n                i += 2;\n            }\n            // DEVICE RESET EVENT\n            else if (channel_id === 0xff && channel_type === 0xfe) {\n                output.attributes.reset_event = 1;\n                i += 1;\n            }\n            // BATTERY\n            else if (channel_id === 0x01 && channel_type === 0x75) {\n                decoded.battery = input[i];\n                i += 1;\n            }\n            // TEMPERATURE\n            else if (channel_id === 0x03 && channel_type === 0x67) {\n                decoded.temperature = parseBytesToInt(input, i, 2, false) / 10;\n                i += 2;\n            }\n            // DISTANCE\n            else if (channel_id === 0x04 && channel_type === 0x82) {\n                decoded.distance = parseBytesToInt(input, i, 2, false);\n                i += 2;\n            }\n            // POSITION\n            else if (channel_id === 0x05 && channel_type === 0x00) {\n                decoded.position = readPositionStatus(input[i]);\n                i += 1;\n            }\n            // RADAR SIGNAL STRENGTH\n            else if (channel_id === 0x06 && channel_type === 0xc7) {\n                decoded.radar_signal_rssi = parseBytesToInt(input, i, 2, false) / 100;\n                i += 2;\n            }\n            // DISTANCE ALARM\n            else if (channel_id === 0x84 && channel_type === 0x82) {\n                decoded.distance = parseBytesToInt(input, i, 2, false)\n                decoded.distance_alarm = readDistanceAlarm(input[i + 2]);\n                i += 3;\n            }\n            // DISTANCE MUTATION ALARM\n            else if (channel_id === 0x94 && channel_type === 0x82) {\n                decoded.distance = parseBytesToInt(input, i, 2, false);\n                decoded.distance_mutation = parseBytesToInt(input, i + 2, 2, false);\n                decoded.distance_alarm = readDistanceAlarm(input[i + 4]);\n                i += 5;\n            }\n            // DISTANCE EXCEPTION ALARM\n            else if (channel_id === 0xb4 && channel_type === 0x82) {\n                var distance_raw_data = parseBytesToInt(input, i, 2, false);\n                var distance_value = parseBytesToInt(input, i, 2, false);\n                decoded.distance_exception = readDistanceException(input[i + 2]);\n                i += 3;\n    \n                var data = {};\n                if (distance_raw_data === 0xfffd || distance_raw_data === 0xffff) {\n                    // IGNORE NO TARGET AND SENSOR EXCEPTION\n                } else {\n                    data.distance = distance_value;\n                }\n            }\n            // HISTORY\n            else if (channel_id === 0x20 && channel_type === 0xce) {\n                var historyData = {\n                    ts: parseBytesToInt(input, i, 4, false) * 1000,\n                    values: {}\n                };\n                \n                var distance_raw_data = parseBytesToInt(input, i + 4, 2, false);\n                var distance_value = parseBytesToInt(input, i + 4, 2, false);\n                var temperature_raw_data = parseBytesToInt(input, i + 6, 2, false);\n                var temperature_value = parseBytesToInt(input, i + 6, 2, false) / 10;\n                var mutation = parseBytesToInt(input, i + 8, 2, false);\n                var event_value = input[i + 10];\n                i += 11;\n    \n                var data = {}\n                if (distance_raw_data === 0xfffd) {\n                    historyData[\"values\"].distance_exception = \"No Target\";\n                } else if (distance_raw_data === 0xffff) {\n                    historyData[\"values\"].distance_exception = \"Sensor Exception\";\n                } else if (distance_raw_data === 0xfffe) {\n                    historyData[\"values\"].distance_exception = \"Disabled\";\n                } else {\n                    historyData[\"values\"].distance = distance_value;\n                }\n    \n                if (temperature_raw_data === 0xfffe) {\n                    historyData[\"values\"].temperature_exception = \"Disabled\";\n                } else if (temperature_raw_data === 0xffff) {\n                    historyData[\"values\"].temperature_exception = \"Sensor Exception\";\n                } else {\n                    historyData[\"values\"].temperature = temperature_value;\n                }\n    \n                var event = readHistoryEvent(event_value);\n                if (event.length > 0) {\n                    historyData[\"values\"].event = event;\n                }\n                if (event.contains(\"Mutation Alarm\")) {\n                    historyData[\"values\"].distance_mutation = mutation;\n                }\n    \n                historyDataList.add(historyData);\n            }\n        }\n    }\n\n    output.telemetry = [{\n        ts: timestamp,\n        values: decoded\n    }];\n    \n    output.telemetry.addAll(historyDataList);\n    \n    // --- Decoding code --- //\n    return output;\n}\n\n// --- attributes and telemetry objects ---\nvar telemetry = [];\nvar attributes = {};\n// --- attributes and telemetry objects ---\n\n// --- Timestamp parsing\nvar dateString = data.time;\ntimestamp = parseDateToTimestamp(dateString);\n// --- Timestamp parsing\n\n// Passing incoming bytes to decodePayload function, to get custom decoding\nvar customDecoding = decodePayload(base64ToBytes(data.data));\n\n\nattributes.eui = data.deviceInfo.devEui;\n\n// Collecting data to result\nif (customDecoding.?telemetry.size() > 0) {\n    if (customDecoding.telemetry instanceof java.util.ArrayList) {\n        foreach(telemetryObj: customDecoding.telemetry) {\n            if (telemetryObj.ts != null && telemetryObj.values != null) {\n                telemetry.add(telemetryObj);\n            }\n        }\n    } else {\n        telemetry.putAll(customDecoding.telemetry);\n    }\n}\n\nif (customDecoding.?attributes.size() > 0) {\n    attributes.putAll(customDecoding.attributes);\n}\n\n// You can add some keys manually to attributes or telemetry\nattributes.eui = data.deviceInfo.?devEui;\nattributes.devAddr = data.devAddr;\nattributes.fPort = data.fPort;\nattributes.applicationId = data.deviceInfo.?applicationId;\nattributes.applicationName = data.deviceInfo.?applicationName;\nattributes.tenantId = data.deviceInfo.?tenantId;\nattributes.tenantName = data.deviceInfo.?tenantName;\nattributes.deviceProfileId = data.deviceInfo.?deviceProfileId;\nattributes.deviceProfileName = data.deviceInfo.?deviceProfileName;\nattributes.frequency = data.txInfo.?frequency;\nattributes.bandwidth = data.txInfo.?modulation.?lora.?bandwidth;\nattributes.spreadingFactor = data.txInfo.?modulation.?lora.?spreadingFactor;\nattributes.codeRate = data.txInfo.?modulation.?lora.?codeRate;\n\nif(Boolean.parseBoolean(metadata[\"includeGatewayInfo\"])) {\n   var gatewayInfo = getGatewayInfo();\n   var addDataToTelemetry = {};\n   addDataToTelemetry.snr = gatewayInfo.snr;\n   addDataToTelemetry.rssi = gatewayInfo.rssi;\n   addDataToTelemetry.channel = gatewayInfo.channel;\n   addDataToTelemetry.rfChain = gatewayInfo.rfChain;\n   addDataToTelemetry.fCnt = data.fCnt;\n   \n   telemetry = processTelemetryData(telemetry, addDataToTelemetry);\n}\n\nvar result = {\n    deviceName: deviceName,\n    deviceType: deviceType,\n    //  assetName: assetName,\n    //  assetType: assetType,\n    attributes: attributes,\n    telemetry: telemetry\n};\n\naddAdditionalInfoForDeviceMsg(result, customerName, groupName);\n\nreturn result;\n\nfunction addAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName) {\n    if (customerName != null) {\n        deviceInfo.customerName = customerName;\n    }\n    if (groupName != null) {\n        deviceInfo.groupName = groupName;\n    }\n}\n\nfunction parseDateToTimestamp(dateString) {\n    var date = new Date(dateString);\n    var timestamp = date.getTime();\n   \n    // If we cannot parse timestamp - we will use the current timestamp\n    if (timestamp == -1) {\n        timestamp = Date.now();\n    }\n    \n    return timestamp;\n}\n\nfunction getGatewayInfo() {\n    var gatewayList = data.rxInfo;\n    var maxRssi = Integer.MIN_VALUE;\n    var gatewayInfo = {};\n    \n    foreach (gateway : gatewayList) {\n        if(gateway.rssi > maxRssi) {\n            maxRssi = gateway.rssi;\n            gatewayInfo = gateway;\n        }\n    }\n    \n    return gatewayInfo;\n}\n\nfunction processTelemetryData(telemetry, addDataToTelemetry) {\n    if (telemetry.size >= 1) {\n        telemetry = addDataToTelemetries(telemetry, addDataToTelemetry);\n    }\n    else {\n        telemetry.add(addDataToTelemetry);\n    }\n    \n    return telemetry;\n}\n\nfunction addDataToTelemetries(telemetries, addDataToTelemetry) {\n    foreach(telemetry : telemetries) {\n        foreach(element : addDataToTelemetry.entrySet()) {\n            if(!telemetry[\"values\"].keys.contains(element.key)) {\n                telemetry[\"values\"][element.key] = element.value;\n            }\n        } \n    }\n    \n    return telemetries;\n}\n\nfunction readProtocolVersion(bytes) {\n    var major = (bytes & 0xf0) >> 4;\n    var minor = bytes & 0x0f;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readHardwareVersion(bytes) {\n    var major = bytes[0] & 0xff;\n    var minor = (bytes[1] & 0xff) >> 4;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readFirmwareVersion(bytes) {\n    var major = bytes[0] & 0xff;\n    var minor = bytes[1] & 0xff;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readTslVersion(bytes) {\n    var major = bytes[0] & 0xff;\n    var minor = bytes[1] & 0xff;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readSerialNumber(bytes) {\n    var resultSerialNumber = \"\";\n\n    for (b : bytes) {\n        resultSerialNumber += String.format(\"%02x\", b & 0xff);\n    }\n\n    return resultSerialNumber;\n}\n\nfunction readLoRaWANClass(type) {\n    switch (type) {\n        case 0:\n            return \"ClassA\";\n        case 1:\n            return \"ClassB\";\n        case 2:\n            return \"ClassC\";\n        case 3:\n            return \"ClassCtoB\";\n    }\n}\n\nfunction readPositionStatus(status) {\n    switch (status) {\n        case 0:\n            return \"Normal\";\n        case 1:\n            return \"Tilt\";\n        default:\n            return \"Unknown\";\n    }\n}\n\nfunction readDistanceAlarm(status) {\n    switch (status) {\n        case 0:\n            return \"Threshold Alarm Release\";\n        case 1:\n            return \"Threshold Alarm\";\n        case 2:\n            return \"Mutation Alarm\";\n        default:\n            return \"Unknown\";\n    }\n}\n\nfunction readDistanceException(status) {\n    switch (status) {\n        case 0:\n            return \"Blind Spot Alarm Release\";\n        case 1:\n            return \"Blind Spot Alarm\";\n        case 2:\n            return \"No Target\";\n        case 3:\n            return \"Sensor Exception\";\n        default:\n            return \"Unknown\";\n    }\n}\n\nfunction readHistoryEvent(status) {\n    var event = [];\n\n    if (((status >>> 0) & 0x01) === 0x01) {\n        event.push(\"Threshold Alarm\");\n    }\n    if (((status >>> 1) & 0x01) === 0x01) {\n        event.push(\"Threshold Alarm Release\");\n    }\n    if (((status >>> 2) & 0x01) === 0x01) {\n        event.push(\"Blind Spot Alarm\");\n    }\n    if (((status >>> 3) & 0x01) === 0x01) {\n        event.push(\"Blind Spot Alarm Release\");\n    }\n    if (((status >>> 4) & 0x01) === 0x01) {\n        event.push(\"Mutation Alarm\");\n    }\n    if (((status >>> 5) & 0x01) === 0x01) {\n        event.push(\"Tilt Alarm\");\n    }\n\n    return event;\n}",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "tenantId",
      "tenantName",
      "applicationId",
      "applicationName",
      "deviceProfileId",
      "deviceProfileName",
      "devAddr",
      "fPort",
      "frequency",
      "bandwidth",
      "spreadingFactor",
      "codeRate",
      "channel",
      "rfChain",
      "eui",
      "battery"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}