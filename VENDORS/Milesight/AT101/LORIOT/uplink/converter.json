{
  "name": "Loriot Uplink Converter for Milesight AT101",
  "type": "UPLINK",
  "debugMode": false,
  "debugSettings": {
    "failuresEnabled": true,
    "allEnabled": false,
    "allEnabledUntil": 1735209505483
  },
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
    "tbelDecoder": "var data = decodeToJson(payload);\nvar deviceName = \"AT101 \" + data.EUI;\nvar deviceType = \"AT101\";\nvar groupName = null; // If groupName is not null - created device will be added to the entity group with such name.\nvar customerName = null; // If customerName is not null - created devices will be assigned to customer with such name. \n\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// If you want to parse incoming data somehow, you can add your code to this function.\n// input: bytes\n// expected output:\n//  {\n//    \"attributes\": {\"attributeKey\": \"attributeValue\"},\n//    \"telemetry\": {\"telemetryKey\": \"telemetryValue\"}\n//  }\n\nfunction decodePayload(input) {\n    var output = { attributes: {}, telemetry: []};\n    \n    // --- Decoding code --- //\n    var decoded = {};\n    var historyDataList = [];\n    var wifi = [];\n    for (var i = 0; i < input.length - 2; ) {\n        var channel_id = input[i++] & 0xff;\n        var channel_type = input[i++] & 0xff;\n        // BATTERY\n        if(channel_id === 0x01 && channel_type === 0x75) {\n            decoded.battery = input[i]; \n            i += 1;\n        }\n        // TEMPERATURE\n        if (channel_id === 0x03 && channel_type === 0x67) {\n            // ℃\n            decoded.temperature = parseBytesToInt(input, i, 2, false) / 10;\n            // ℉\n            // decoded.temperature = parseBytesToInt(input, i, 2, false) / 10 * 1.8 + 32;\n            i += 2;\n        }\n        // Location\n        if ((channel_id === 0x04 || channel_id == 0x84) && channel_type === 0x88) {\n            decoded.latitude = parseBytesToInt(input, i, 4, false) / 1000000;\n            decoded.longitude = parseBytesToInt(input, i+4, 4, false) / 1000000;\n            var status = input[i+8];\n            decoded.motion_status = getMotionStatus(status & 0x0f);\n            decoded.geofence_status = getGeofenceStatus((status >> 4) & 0x0f);\n            i +=9;\n        }\n        // Position\n        if (channel_id === 0x05 && channel_type === 0x00) {\n            decoded.position = input[i] === 0 ? \"normal\" : \"tilt\";\n            i += 1;\n        }\n        // Wi-Fi SCAN RESULT\n        if (channel_id === 0x06 && channel_type === 0xd9) {\n            var wifiObject = {};\n            wifiObject.group = input[i];\n            wifiObject.mac = readMAC(input.slice(i + 1, i + 7));\n            wifiObject.rssi = input[i+7];\n            wifiObject.motion_status = getMotionStatus(input[i + 8] & 0x0f);\n            i += 9;\n\n            decoded.wifi_scan_result = \"finish\";\n            if (wifiObject.mac === \"ff:ff:ff:ff:ff:ff\") {\n                decoded.wifi_scan_result = \"timeout\";\n                continue;\n            }\n            decoded.motion_status = wifiObject.motion_status;\n\n            wifi.add(wifiObject);\n        }\n        //Tamper Status\n        if (channel_id === 0x07 && channel_type === 0x00) {\n            decoded.tamper_status = input[i] === 0 ? \"install\" : \"uninstall\";\n            i +=1;\n        }\n        // TEMPERATURE WITH ABNORMAL\n        if (channel_id === 0x83 && channel_type === 0x67) {\n            decoded.temperature = parseBytesToInt(input, i, 2, false) / 10;\n            decoded.temperature_abnormal = input[i + 2] == 0 ? false : true;\n            i += 3;\n        }\n        // HISTORICAL DATA\n        if (channel_id === 0x20 && channel_type === 0xce) {\n            var historyData = {\n                ts : parseBytesToInt(input, i, 4, false),\n                values : {\n                   longitude : parseBytesToInt(input, i + 4, 4, false) / 1000000,\n                   latitude :  parseBytesToInt(input, i + 8, 4, false) / 1000000\n                }\n            };\n            \n            historyDataList.add(historyData);\n            \n            i += 12;\n        } \n    }\n    \n    decoded.wifi = wifi.size > 0 ? wifi : null;\n    \n    output.telemetry = [{\n        ts: timestamp,\n        values: decoded\n    }];\n    \n    output.telemetry.addAll(historyDataList);\n\n    // --- Decoding code --- //\n    return output;\n}\n\n// --- attributes and telemetry objects ---\nvar telemetry = [];\nvar attributes = {};\n// --- attributes and telemetry objects ---\n\n// --- Timestamp parsing\ntimestamp = data.ts;\n// --- Timestamp parsing\n\n// Message parsing\n// To avoid paths in the decoded objects we passing false value to function as \"pathInKey\" argument.\n// Warning: pathInKey can cause already found fields to be overwritten with the last value found.\n\nvar uplinkDataList = [];\n\n// Passing incoming bytes to decodePayload function, to get custom decoding\nvar customDecoding = decodePayload(hexToBytes(data.data));\n\n// Collecting data to result\nif (customDecoding.?telemetry.size() > 0) {\n    if (customDecoding.telemetry instanceof java.util.ArrayList) {\n        foreach(telemetryObj: customDecoding.telemetry) {\n            if (telemetryObj.ts != null && telemetryObj.values != null) {\n                telemetry.add(telemetryObj);\n            }\n        }\n    } else {\n        telemetry.putAll(customDecoding.telemetry);\n    }\n}\n\nif (customDecoding.?attributes.size() > 0) {\n    attributes.putAll(customDecoding.attributes);\n}\n\n// You can add some keys manually to attributes or telemetry\nattributes.eui = data.EUI;\nattributes.fPort = data.port;\nattributes.frequency = data.freq;\n\nvar addDataToTelemetry = {};\naddDataToTelemetry.rssi = data.rssi;\naddDataToTelemetry.seqno = data.seqno;\naddDataToTelemetry.snr = data.snr;\naddDataToTelemetry.ack = data.ack;\naddDataToTelemetry.toa = data.toa;\naddDataToTelemetry.fCnt = data.fcnt;\n\nvar isIncludeGatewayInfo = metadata[\"includeGatewayInfo\"];\nif(isIncludeGatewayInfo == true) {\n   telemetry = processTelemetryData(telemetry, addDataToTelemetry);\n}\n\nvar deviceInfo = {\n    deviceName: deviceName,\n    deviceType: deviceType,\n//  assetName: assetName,\n//  assetType: assetType,\n    attributes: attributes,\n    telemetry: telemetry, \n};\n\naddAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName);\n\nuplinkDataList.add(deviceInfo);\n\nvar gatewayDeviceNamePrefix = \"Gateway \";\nvar gatewayDeviceType = \"Lora gateway\";\nvar gatewayGroupName = null; // If gatewayGroupName is not null - created device will be added to the entity group with such name.\n\nif (data.cmd == \"gw\") {\n    foreach( gatewayInfo : data.gws ) {\n        var addGatewayInfo = {};\n\n        // You can add some keys manually telemetry\n        addGatewayInfo.rssi = gatewayInfo.rssi;\n        addGatewayInfo.snr = gatewayInfo.snr;\n        // You can add some keys manually telemetry\n        \n        var gatewayInfoMsg = {\n            deviceName: gatewayDeviceNamePrefix + gatewayInfo.gweui,\n            deviceType: gatewayDeviceType,\n            telemetry: [{\n                \"ts\": gatewayInfo.ts,\n                \"values\": addGatewayInfo\n            }],\n            attributes: {\n                eui: gatewayInfo.gweui\n            }\n        };\n        addAdditionalInfoForDeviceMsg(gatewayInfoMsg, customerName, gatewayGroupName);\n        uplinkDataList.add(gatewayInfoMsg);\n    }\n}\n\nreturn uplinkDataList;\n\nfunction addAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName) {\n    if (customerName != null) {\n        deviceInfo.customerName = customerName;\n    }\n    if (groupName != null) {\n        deviceInfo.groupName = groupName;\n    }\n}\n\nfunction parseDateToTimestamp(dateString) {\n    var timestamp = -1;\n    if (dateString != null) {\n        \n        timestamp = new Date(dateString).getTime();\n        if (timestamp == -1) {\n            var secondsSeparatorIndex = dateString.lastIndexOf('.') + 1;\n            var millisecondsEndIndex = dateString.lastIndexOf('+');\n            if (millisecondsEndIndex == -1) {\n                millisecondsEndIndex = dateString.lastIndexOf('Z');\n            }\n            if (millisecondsEndIndex == -1) {\n                millisecondsEndIndex = dateString.lastIndexOf('-');\n            }\n            if (millisecondsEndIndex == -1) {\n                if (dateString.length >= secondsSeparatorIndex + 3) {\n                    dateString = dateString.substring(0, secondsSeparatorIndex + 3);\n                }\n            } else {\n                dateString = dateString.substring(0, secondsSeparatorIndex + 3) +\n                dateString.substring(millisecondsEndIndex, dateString.length);\n            }\n            \n            timestamp = new Date(dateString).getTime();\n        }\n    }\n    // If we cannot parse timestamp - we will use the current timestamp\n    if (timestamp == -1) {\n        timestamp = Date.now();\n    }\n    \n    return timestamp;\n}\n\nfunction processTelemetryData(telemetry, addDataToTelemetry) {\n    if (telemetry.size >= 1) {\n        telemetry = addDataToTelemetries(telemetry, addDataToTelemetry);\n    }\n    else {\n        telemetry.add(addDataToTelemetry);\n    }\n    \n    return telemetry;\n}\n\nfunction addDataToTelemetries(telemetries, addDataToTelemetry) {\n    foreach(telemetry : telemetries) {\n        foreach(element : addDataToTelemetry.entrySet()) {\n            if(!telemetry[\"values\"].keys.contains(element.key)) {\n                telemetry[\"values\"][element.key] = element.value;\n            }\n        } \n    }\n    \n    return telemetries;\n}\n\nfunction getMotionStatus(status) {\n    if(status == 0) {\n        return \"unknown\";\n    }\n    else if (status == 1) {\n        return \"start moving\";\n    }\n    else if (status == 2) {\n        return \"moving\";\n    }\n    else {\n        return \"stop moving\";\n    }\n}\n\nfunction getGeofenceStatus(status) {\n    if(status == 0) {\n        return \"inside\";\n    }\n    else if (status == 1) {\n        return \"outside\";\n    }\n    else if (status == 2) {\n        return \"unset\";\n    }\n    else {\n        return \"unknown\";\n    }\n}\n\nfunction readMAC(bytes) {\n    var temp = [];\n     for (b : bytes) {\n        temp.add(String.format(\"%02x\", b & 0xFF));\n    }\n    return String.join(\":\", temp);\n}",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "fPort",
      "battery",
      "ack",
      "beep",
      "eui",
      "frequency",
      "dr"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}