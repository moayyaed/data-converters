{
  "name": "Http Uplink Converter for Milesight AT101",
  "type": "UPLINK",
  "debugMode": false,
  "debugSettings": {
    "failuresEnabled": true,
    "allEnabled": false,
    "allEnabledUntil": 1735560006385
  },
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": null,
    "tbelDecoder": "var data = decodeToJson(payload);\nvar deviceName =  \"AT101 \" + data.devEUI;\nvar deviceType = \"AT101\";\nvar groupName = null; // If groupName is not null - created device will be added to the entity group with such name.\nvar customerName = null; // If customerName is not null - created devices will be assigned to customer with such name. \n\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// If you want to parse incoming data somehow, you can add your code to this function.\n// input: bytes\n// expected output:\n//  {\n//    \"attributes\": {\"attributeKey\": \"attributeValue\"},\n//    \"telemetry\": [{\"ts\": 1...1, \"values\": {\"telemetryKey\":\"telemetryValue\"}, {\"ts\": 1...2, \"values\":                      {\"telemetryKey\":\"telemetryValue\"}}]\n//  }\n\nfunction decodePayload(input) {\n    var output = {\n        attributes: {},\n        telemetry: []\n    };\n    \n    // --- Decoding code --- //\n    var decoded = {};\n    var wifi = [];\n    var fPort = data.fPort;\n    var historyDataList = [];\n    if(fPort == 85) {\n        for (var i = 0; i < input.length - 2;) {\n            var channel_id = input[i++] & 0xff;\n            var channel_type = input[i++] & 0xff;\n            // BATTERY\n            if (channel_id === 0x01 && channel_type === 0x75) {\n                decoded.battery = input[i];\n                i += 1;\n            }\n            // TEMPERATURE\n            if (channel_id === 0x03 && channel_type === 0x67) {\n                // ℃\n                decoded.temperature = parseBytesToInt(input, i,\n                    2, false) / 10;\n                i += 2;\n                // ℉\n                // decoded.temperature = parseBytesToInt(input, i, 2, false) / 10 * 1.8 + 32;\n                // i +=2;\n            }\n            // Location\n            if ((channel_id === 0x04 || channel_id == 0x84) && channel_type === 0x88) {\n                decoded.latitude = parseBytesToInt(input, i, 4, false) / 1000000;\n                decoded.longitude = parseBytesToInt(input, i+4, 4, false) / 1000000;\n                var status = input[i+8];\n                decoded.motion_status = getMotionStatus(status & 0x0f);\n                decoded.geofence_status = getGeofenceStatus((status >> 4) & 0x0f);\n                i +=9;\n            }\n            // Position\n            if (channel_id === 0x05 && channel_type === 0x00) {\n                decoded.position = input[i] === 0 ? \"normal\" : \"tilt\";\n                i += 1;\n            }\n            // Wi-Fi SCAN RESULT\n            if (channel_id === 0x06 && channel_type === 0xd9) {\n                var wifiObject = {};\n                wifiObject.group = input[i];\n                var macBytes = java.util.Arrays.copyOfRange(input, i + 1, i + 7);\n                wifiObject.mac = readMAC(macBytes);\n                wifiObject.rssi = input[i+7];\n                wifiObject.motion_status = getMotionStatus(input[i + 8] & 0x0f);\n                i += 9;\n    \n                decoded.wifi_scan_result = \"finish\";\n                if (wifiObject.mac === \"ff:ff:ff:ff:ff:ff\") {\n                    decoded.wifi_scan_result = \"timeout\";\n                    continue;\n                }\n                decoded.motion_status = wifiObject.motion_status;\n    \n                wifi.add(wifiObject);\n            }\n            //Tamper Status\n            if (channel_id === 0x07 && channel_type === 0x00) {\n                decoded.tamper_status = input[i] === 0 ? \"install\" : \"uninstall\";\n                i +=1;\n            }\n            // TEMPERATURE WITH ABNORMAL\n            if (channel_id === 0x83 && channel_type === 0x67) {\n                decoded.temperature = parseBytesToInt(input, i, 2, false) / 10;\n                decoded.temperature_abnormal = input[i + 2] == 0 ? false : true;\n                i += 3;\n            }\n            // HISTORICAL DATA\n            if (channel_id === 0x20 && channel_type === 0xce) {\n                historyData = {\n                    ts : parseBytesToInt(input, i, 4, false),\n                    values : {\n                       longitude : parseBytesToInt(input, i + 4, 4, false) / 1000000,\n                       latitude :  parseBytesToInt(input, i + 8, 4, false) / 1000000\n                    }\n                };\n                \n                historyDataList.add(historyData);\n                i += 12;\n            } \n        }\n        \n        decoded.wifi = wifi.size > 0 ? wifi : null;\n    }\n\n    output.telemetry = [{\n        ts: timestamp,\n        values: decoded\n    }];\n    \n    output.telemetry.addAll(historyDataList);\n    \n    // --- Decoding code --- //\n    return output;\n}\n\n// --- attributes and telemetry objects ---\nvar telemetry = [];\nvar attributes = {};\n// --- attributes and telemetry objects ---\n\n// --- Timestamp parsing\nvar dateString = data.time;\ntimestamp = parseDateToTimestamp(dateString);\n// --- Timestamp parsing\n\n// Passing incoming bytes to decodePayload function, to get custom decoding\nvar customDecoding = decodePayload(base64ToBytes(data.data));\n\n// Collecting data to result\nif (customDecoding.?telemetry.size() > 0) {\n    foreach(telemetryObj: customDecoding.telemetry) {\n        if (telemetryObj.ts != null && telemetryObj.values != null) {\n            telemetry.add(telemetryObj);\n        }\n    }\n}\n\nif (customDecoding.?attributes.size() > 0) {\n    attributes.putAll(customDecoding.attributes);\n}\n\n// You can add some keys manually to attributes or telemetry\nattributes.eui = data.?devEui;\nattributes.fPort = data.fPort;\nattributes.applicationId = data.?applicationId;\nattributes.applicationName = data.?applicationName;\nattributes.frequency = data.txInfo.?frequency;\nattributes.bandwidth = data.txInfo.?dataRate.?bandwidth;\nattributes.spreadingFactor = data.txInfo.?dataRate.?spreadFactor;\nattributes.codeRate = data.txInfo.?codeRate;\n\nif(Boolean.parseBoolean(metadata[\"includeGatewayInfo\"])) {\n   var gatewayInfo = getGatewayInfo();\n   var addDataToTelemetry = {};\n   addDataToTelemetry.snr = gatewayInfo.?loRaSNR;\n   addDataToTelemetry.rssi = gatewayInfo.rssi;\n   addDataToTelemetry.fCnt = data.fCnt;\n   \n   telemetry = processTelemetryData(telemetry, addDataToTelemetry);\n}\n\nvar result = {\n    deviceName: deviceName,\n    deviceType: deviceType,\n    //  assetName: assetName,\n    //  assetType: assetType,\n    attributes: attributes,\n    telemetry: telemetry\n};\n\naddAdditionalInfoForDeviceMsg(result, customerName, groupName);\n\nreturn result;\n\nfunction addAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName) {\n    if (customerName != null) {\n        deviceInfo.customerName = customerName;\n    }\n    if (groupName != null) {\n        deviceInfo.groupName = groupName;\n    }\n}\n\nfunction parseDateToTimestamp(dateString) {\n    dateString = dateString.replaceFirst(\"(\\\\d{4}-\\\\d{2})(\\\\d{2})\", \"$1-$2\");\n    dateString = dateString.replaceFirst(\"\\\\.(\\\\d{3})\\\\d+Z\", \".$1Z\");\n    dateString = dateString.replace(\"Z\", \"+0000\");\n    var date = new Date(dateString);\n    var timestamp = date.getTime();\n   \n    // If we cannot parse timestamp - we will use the current timestamp\n    if (timestamp == -1) {\n       timestamp = Date.now();\n    }\n    \n    return timestamp;\n}\n\nfunction getGatewayInfo() {\n    var gatewayList = data.rxInfo;\n    var maxRssi = Integer.MIN_VALUE;\n    var gatewayInfo = {};\n    \n    foreach (gateway : gatewayList) {\n        if(gateway.rssi > maxRssi) {\n            maxRssi = gateway.rssi;\n            gatewayInfo = gateway;\n        }\n    }\n    \n    return gatewayInfo;\n}\n\nfunction processTelemetryData(telemetry, addDataToTelemetry) {\n    if (telemetry.size >= 1) {\n        telemetry = addDataToTelemetries(telemetry, addDataToTelemetry);\n    }\n    else {\n        telemetry.add(addDataToTelemetry);\n    }\n    \n    return telemetry;\n}\n\nfunction addDataToTelemetries(telemetries, addDataToTelemetry) {\n    foreach(telemetry : telemetries) {\n        foreach(element : addDataToTelemetry.entrySet()) {\n            if(!telemetry[\"values\"].keys.contains(element.key)) {\n                telemetry[\"values\"][element.key] = element.value;\n            }\n        } \n    }\n    \n    return telemetries;\n}\n\nfunction getMotionStatus(status) {\n    if(status == 0) {\n        return \"unknown\";\n    }\n    else if (status == 1) {\n        return \"start moving\";\n    }\n    else if (status == 2) {\n        return \"moving\";\n    }\n    else {\n        return \"stop moving\";\n    }\n}\n\nfunction getGeofenceStatus(status) {\n    if(status == 0) {\n        return \"inside\";\n    }\n    else if (status == 1) {\n        return \"outside\";\n    }\n    else if (status == 2) {\n        return \"unset\";\n    }\n    else {\n        return \"unknown\";\n    }\n}\n\nfunction readMAC(bytes) {\n    var temp = [];\n    for (b : bytes) {\n        temp.add(String.format(\"%02x\", b & 0xFF));\n    }\n    \n    return String.join(\":\", temp);\n}",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "fPort",
      "applicationName",
      "frequency",
      "bandwidth",
      "spreadingFactor",
      "codeRate"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}