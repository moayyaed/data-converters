{
  "name": "Chirp Stack Uplink Converter for Milesight CT101||CT103",
  "type": "UPLINK",
  "debugMode": true,
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": null,
    "tbelDecoder": "var data = decodeToJson(payload);\nvar deviceName = \"CT101/CT103 \" + data.deviceInfo.deviceName;\nvar deviceType = \"CT101/CT103\";\nvar groupName = null; // If groupName is not null - created device will be added to the entity group with such name.\nvar customerName = null; // If customerName is not null - created devices will be assigned to customer with such name. \n\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// If you want to parse incoming data somehow, you can add your code to this function.\n// input: bytes\n// expected output:\n//  {\n//    \"attributes\": {\"attributeKey\": \"attributeValue\"},\n//    \"telemetry\": [{\"ts\": 1...1, \"values\": {\"telemetryKey\":\"telemetryValue\"}, {\"ts\": 1...2, \"values\":                      {\"telemetryKey\":\"telemetryValue\"}}]\n//  }\n\nfunction decodePayload(input) {\n    var output = {\n        attributes: {},\n        telemetry: []\n    };\n    \n    // --- Decoding code --- //\n    var decoded = {};\n    for (var i = 0; i < input.length - 2;) {\n        var channel_id = input[i++] & 0xff;\n        var channel_type = input[i++] & 0xff;\n        \n        // POWER STATE\n        if (channel_id === 0xff && channel_type === 0x0b) {\n            decoded.power = \"on\";\n            i += 1;\n        }\n        // IPSO VERSION\n        if (channel_id === 0xff && channel_type === 0x01) {\n            decoded.ipso_version = readProtocolVersion(input[i]);\n            i += 1;\n        }\n        // PRODUCT SERIAL NUMBER\n        if (channel_id === 0xff && channel_type === 0x16) {\n            decoded.sn = bytesToHex(java.util.Arrays.copyOfRange(input, i, i + 8));\n            i += 8;\n        }\n        // HARDWARE VERSION\n        if (channel_id === 0xff && channel_type === 0x09) {\n            decoded.hardware_version = readHardwareVersion(java.util.Arrays.copyOfRange(input, i, i + 2));\n            i += 2;\n        }\n        // FIRMWARE VERSION\n        if (channel_id === 0xff && channel_type === 0x0a) {\n            decoded.firmware_version = readFirmwareVersion(java.util.Arrays.copyOfRange(input, i, i + 2));\n            i += 2;\n        }\n        // TOTAL CURRENT\n        if (channel_id === 0x03 && channel_type === 0x97) {\n            decoded.total_current = parseBytesToInt(input, i, 4, false) / 100;\n            i += 4;\n        }\n        // CURRENT\n        if (channel_id === 0x04 && channel_type === 0x98) {\n            var value = parseBytesToInt(input, i, 2, false);\n            if (value === 0xffff) {\n                decoded.alarm = \"read failed\";\n            } else {\n                decoded.current = value / 100;\n            }\n            i += 2;\n        }\n         // TEMPERATURE\n        if (channel_id === 0x09 && channel_type === 0x67) {\n            var temperature_value = parseBytesToInt(input, i, 2, false);\n            if (temperature_value === 0xfffd) {\n                decoded.temperature_exception = \"over range alarm\";\n            } else if (temperature_value === 0xffff) {\n                decoded.temperature_exception = \"read failed\";\n            } else {\n                decoded.temperature = parseBytesToInt(input, i, 2, false) / 10;\n            }\n            i += 2;\n        }\n        // CURRENT ALARM\n        if (channel_id === 0x84 && channel_type === 0x98) {\n            decoded.current_max = parseBytesToInt(input, i, 2, false) / 100;\n            decoded.current_min = parseBytesToInt(input, i + 2, 2, false) / 100;\n            decoded.current = parseBytesToInt(input, i + 4, 2, false) / 100;\n            decoded.alarm = readCurrentAlarm(input[i + 6]);\n            i += 7;\n        }\n        // TEMPERATURE ALARM\n        if (channel_id === 0x89 && channel_type === 0x67) {\n            decoded.temperature = parseBytesToInt(input, i, 2, false) / 10;\n            decoded.temperature_alarm = readTemperatureAlarm(input[i + 2]);\n            i += 3;\n        }\n    }\n\n    output.telemetry = [{\n        ts: timestamp,\n        values: decoded\n    }];\n    \n    // --- Decoding code --- //\n    return output;\n}\n\n// --- attributes and telemetry objects ---\nvar telemetry = [];\nvar attributes = {};\n// --- attributes and telemetry objects ---\n\n// --- Timestamp parsing\nvar dateString = data.time;\ntimestamp = parseDateToTimestamp(dateString);\n// --- Timestamp parsing\n\n// Passing incoming bytes to decodePayload function, to get custom decoding\nvar customDecoding = decodePayload(base64ToBytes(data\n.data));\n\n\nattributes.eui = data.deviceInfo.devEui;\n\n// Collecting data to result\nif (customDecoding.?telemetry.size() > 0) {\n    if (customDecoding.telemetry instanceof java.util.ArrayList) {\n        foreach(telemetryObj: customDecoding.telemetry) {\n            if (telemetryObj.ts != null && telemetryObj.values != null) {\n                telemetry.add(telemetryObj);\n            }\n        }\n    } else {\n        telemetry.putAll(customDecoding.telemetry);\n    }\n}\n\nif (customDecoding.?attributes.size() > 0) {\n    attributes.putAll(customDecoding.attributes);\n}\n\n// You can add some keys manually to attributes or telemetry\nattributes.eui = data.deviceInfo.?devEui;\nattributes.devAddr = data.devAddr;\nattributes.fPort = data.fPort;\nattributes.applicationId = data.deviceInfo.?applicationId;\nattributes.applicationName = data.deviceInfo.?applicationName;\nattributes.tenantId = data.deviceInfo.?tenantId;\nattributes.tenantName = data.deviceInfo.?tenantName;\nattributes.deviceProfileId = data.deviceInfo.?deviceProfileId;\nattributes.deviceProfileName = data.deviceInfo.?deviceProfileName;\nattributes.frequency = data.txInfo.?frequency;\nattributes.bandwidth = data.txInfo.?modulation.?lora.?bandwidth;\nattributes.spreadingFactor = data.txInfo.?modulation.?lora.?spreadingFactor;\nattributes.codeRate = data.txInfo.?modulation.?lora.?codeRate;\n\nvar gatewayInfo = getGatewayInfo();\nvar addDataToTelemetry = {};\naddDataToTelemetry.snr = gatewayInfo.snr;\naddDataToTelemetry.rssi = gatewayInfo.rssi;\naddDataToTelemetry.channel = gatewayInfo.channel;\naddDataToTelemetry.rfChain = gatewayInfo.rfChain;\naddDataToTelemetry.fCnt = data.fCnt;\n\nvar isIncludeGatewayInfo = metadata[\"includeGatewayInfo\"];\nif(isIncludeGatewayInfo == true) {\n   telemetry = processTelemetryData(telemetry, addDataToTelemetry);\n}\n\nvar result = {\n    deviceName: deviceName,\n    deviceType: deviceType,\n    //  assetName: assetName,\n    //  assetType: assetType,\n    attributes: attributes,\n    telemetry: telemetry\n};\n\naddAdditionalInfoForDeviceMsg(result, customerName, groupName);\n\nreturn result;\n\nfunction addAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName) {\n    if (customerName != null) {\n        deviceInfo.customerName = customerName;\n    }\n    if (groupName != null) {\n        deviceInfo.groupName = groupName;\n    }\n}\n\nfunction parseDateToTimestamp(dateString) {\n    var timestamp = -1;\n    if (dateString != null) {\n        timestamp = new Date(dateString).getTime();\n        if (timestamp == -1) {\n            var secondsSeparatorIndex = dateString.lastIndexOf(\n                '.') + 1;\n            var millisecondsEndIndex = dateString.lastIndexOf(\n                '+');\n            if (millisecondsEndIndex == -1) {\n                millisecondsEndIndex = dateString.lastIndexOf(\n                    'Z');\n            }\n            if (millisecondsEndIndex == -1) {\n                millisecondsEndIndex = dateString.lastIndexOf(\n                    '-');\n            }\n            if (millisecondsEndIndex == -1) {\n                if (dateString.length >= secondsSeparatorIndex +\n                    3) {\n                    dateString = dateString.substring(0,\n                        secondsSeparatorIndex + 3);\n                }\n            } else {\n                dateString = dateString.substring(0,\n                        secondsSeparatorIndex + 3) +\n                    dateString.substring(millisecondsEndIndex,\n                        dateString.length);\n            }\n            timestamp = new Date(dateString).getTime();\n        }\n    }\n    // If we cannot parse timestamp - we will use the current timestamp\n    if (timestamp == -1) {\n        timestamp = Date.now();\n    }\n    \n    return timestamp;\n}\n\nfunction getGatewayInfo() {\n    var gatewayList = data.rxInfo;\n    var maxRssi = Integer. MIN_VALUE;\n    var gatewayInfo = {};\n    \n    foreach (gateway : gatewayList) {\n        if(gateway.rssi > maxRssi) {\n            maxRssi = gateway.rssi;\n            gatewayInfo = gateway;\n        }\n    }\n    \n    return gatewayInfo;\n}\n\nfunction processTelemetryData(telemetry, addDataToTelemetry) {\n    if (telemetry.size > 1) {\n        telemetry = addDataToMultipleTelemetries(telemetry, addDataToTelemetry);\n    }\n    else if (telemetry.size == 1) {\n        telemetry = addDataToSingleTelemetry(telemetry, addDataToTelemetry);\n    }\n    else {\n        telemetry.add(addDataToTelemetry);\n    }\n    \n    return telemetry;\n}\n\nfunction addDataToMultipleTelemetries(telemetry, addDataToTelemetry) {\n    foreach(element : addDataToTelemetry.entrySet()) {\n        if(!telemetry[0][\"values\"].keys.contains(element.key)) {\n            telemetry[0][\"values\"][element.key] = element.value;\n        }\n        if (!telemetry[1][\"values\"].keys.contains(element.key)) {\n            telemetry[1][\"values\"][element.key] = element.value;\n        }\n    }\n    \n    return telemetry;\n}\n\nfunction addDataToSingleTelemetry(telemetry, addDataToTelemetry) {\n    foreach(element : addDataToTelemetry.entrySet()) {\n            if(!telemetry[0][\"values\"].keys.contains(element.key)) {\n                telemetry[0][\"values\"][element.key] = element.value;\n            }\n    }\n    \n    return telemetry;\n}\n\nfunction readProtocolVersion(bytes) {\n    var major = (bytes & 0xf0) >> 4;\n    var minor = bytes & 0x0f;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readHardwareVersion(bytes) {\n    var major = bytes[0] & 0xff;\n    var minor = (bytes[1] & 0xff) >> 4;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readFirmwareVersion(bytes) {\n    var major = bytes[0] & 0xff;\n    var minor = bytes[1] & 0xff;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readCurrentAlarm(type) {\n    var alarm = [];\n    if ((type >> 0 & 0x01) != 0) {\n        alarm.add(\"threshold alarm\");\n    }\n    if ((type >> 1 & 0x01) != 0) {\n        alarm.add(\"threshold alarm release\");\n    }\n    if ((type >> 2 & 0x01) != 0) {\n        alarm.add(\"over range alarm\");\n    }\n    if ((type >> 3 & 0x01) != 0) {\n        alarm.add(\"over range alarm release\");\n    }\n    \n    return alarm;\n}\n\nfunction readTemperatureAlarm(type) {\n    var alarms = [];\n    \n    if ((type & 0x01) != 0) {\n        alarms.add(\"Threshold alarm\");\n    }\n    if ((type & 0x02) != 0) {\n        alarms.add(\"Threshold alarm dismiss\");\n    }\n\n    return alarms;\n}",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "tenantId",
      "tenantName",
      "applicationId",
      "applicationName",
      "deviceProfileId",
      "deviceProfileName",
      "devAddr",
      "fPort",
      "frequency",
      "bandwidth",
      "spreadingFactor",
      "codeRate",
      "battery",
      "channel",
      "rfChain",
      "eui",
      "beep"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}