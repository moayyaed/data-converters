{
  "name": "Chirp Stack Uplink Converter for Milesight VS121",
  "type": "UPLINK",
  "debugMode": false,
  "debugSettings": {
    "failuresEnabled": true,
    "allEnabled": false,
    "allEnabledUntil": 1733331880270
  },
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": null,
    "tbelDecoder": "var data = decodeToJson(payload);\nvar deviceName = \"VS121 \" + data.deviceInfo.devEui;\nvar deviceType = \"VS121\";\nvar groupName = null; // If groupName is not null - created device will be added to the entity group with such name.\nvar customerName = null; // If customerName is not null - created devices will be assigned to customer with such name. \n\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// If you want to parse incoming data somehow, you can add your code to this function.\n// input: bytes\n// expected output:\n//  {\n//    \"attributes\": {\"attributeKey\": \"attributeValue\"},\n//    \"telemetry\": [{\"ts\": 1...1, \"values\": {\"telemetryKey\":\"telemetryValue\"}, {\"ts\": 1...2, \"values\":                      {\"telemetryKey\":\"telemetryValue\"}}]\n//  }\n\nfunction decodePayload(input) {\n    var output = {\n        attributes: {},\n        telemetry: []\n    };\n    \n    // --- Decoding code --- //\n    var decoded = {};\n    var fPort = data.fPort;\n    if(fPort == 85) {\n        for(var i = 0; i < input.length - 2; ) {\n            var channel_id = input[i++] & 0xff;\n            var channel_type = input[i++] & 0xff;\n            \n            // PROTOCOL VESION\n            if (channel_id === 0xff && channel_type === 0x01) {\n                output.attributes.protocol_version = input[i];\n                i += 1;\n            }\n            // SERIAL NUMBER\n            else if (channel_id === 0xff && channel_type === 0x08) {\n                output.attributes.sn = readSerialNumber(java.util.Arrays.copyOfRange(input, i, i + 6));\n                i += 6;\n            }\n            // HARDWARE VERSION\n            else if (channel_id === 0xff && channel_type === 0x09) {\n                output.attributes.hardware_version = readVersion(java.util.Arrays.copyOfRange(input, i, i + 2));\n                i += 2;\n            }\n            // FIRMWARE VERSION\n            else if (channel_id === 0xff && channel_type === 0x1f) {\n                output.attributes.firmware_version = readVersion(java.util.Arrays.copyOfRange(input, i, i + 4));\n                i += 4;\n            }\n            // PEOPLE COUNTER\n            else if (channel_id === 0x04 && channel_type === 0xc9) {\n                decoded.people_count_all = input[i];\n                decoded.region_count = input[i + 1];\n                var region = parseBytesToInt(input, i + 2, 2);\n                for (var idx = 0; idx < decoded.region_count; idx++) {\n                    var tmp = \"region_\" + (idx + 1);\n                    decoded.tmp = (region >> idx) & 1;\n                }\n                i += 4;\n            }\n            // PEOPLE IN/OUT\n            else if (channel_id === 0x05 && channel_type === 0xcc) {\n                decoded.people_in = parseBytesToInt(input, i, 2);\n                decoded.people_out = parseBytesToInt(input, i + 2, 2);\n                i += 4;\n            }\n            // PEOPLE MAX\n            else if (channel_id === 0x06 && channel_type === 0xcd) {\n                decoded.people_count_max = input[i];\n                i += 1;\n            }\n             // REGION COUNTER\n            else if (channel_id === 0x07 && channel_type === 0xd5) {\n                decoded.region_1_count = input[i];\n                decoded.region_2_count = input[i + 1];\n                decoded.region_3_count = input[i + 2];\n                decoded.region_4_count = input[i + 3];\n                decoded.region_5_count = input[i + 4];\n                decoded.region_6_count = input[i + 5];\n                decoded.region_7_count = input[i + 6];\n                decoded.region_8_count = input[i + 7];\n                i += 8;\n            }\n            // REGION COUNTER\n            else if (channel_id === 0x08 && channel_type === 0xd5) {\n                decoded.region_9_count =  input[i];\n                decoded.region_10_count = input[i + 1];\n                decoded.region_11_count = input[i + 2];\n                decoded.region_12_count = input[i + 3];\n                decoded.region_13_count = input[i + 4];\n                decoded.region_14_count = input[i + 5];\n                decoded.region_15_count = input[i + 6];\n                decoded.region_16_count = input[i + 7];\n                i += 8;\n            }\n            // A FLOW\n            else if (channel_id === 0x09 && channel_type === 0xda) {\n                decoded.a_to_a = parseBytesToInt(input, i, 2);\n                decoded.a_to_b = parseBytesToInt(input, i + 2, 2);\n                decoded.a_to_c = parseBytesToInt(input, i + 4, 2);\n                decoded.a_to_d = parseBytesToInt(input, i + 6, 2);\n                i += 8;\n            }\n            // B FLOW\n            else if (channel_id === 0x0a && channel_type === 0xda) {\n                decoded.b_to_a = parseBytesToInt(input, i, 2);\n                decoded.b_to_b = parseBytesToInt(input, i + 2, 2);\n                decoded.b_to_c = parseBytesToInt(input, i + 4, 2);\n                decoded.b_to_d = parseBytesToInt(input, i + 6, 2);\n                i += 8;\n            }\n            // C FLOW\n            else if (channel_id === 0x0b && channel_type === 0xda) {\n                decoded.c_to_a = parseBytesToInt(input, i, 2);\n                decoded.c_to_b = parseBytesToInt(input, i + 2, 2);\n                decoded.c_to_c = parseBytesToInt(input, i + 4, 2);\n                decoded.c_to_d = parseBytesToInt(input, i + 6, 2);\n                i += 8;\n            }\n            // D FLOW\n            else if (channel_id === 0x0c && channel_type === 0xda) {\n                decoded.d_to_a = parseBytesToInt(input, i, 2);\n                decoded.d_to_b = parseBytesToInt(input, i + 2, 2);\n                decoded.d_to_c = parseBytesToInt(input, i + 4, 2);\n                decoded.d_to_d = parseBytesToInt(input, i + 6, 2);\n                i += 8;\n            }\n            // TOTAL IN/OUT\n            else if (channel_id === 0x0d && channel_type === 0xcc) {\n                decoded.people_total_in = parseBytesToInt(input, i, 2);\n                decoded.people_total_out = parseBytesToInt(input, i + 2, 2);\n                i += 4;\n            }\n            // DWELL TIME\n            else if (channel_id === 0x0e && channel_type === 0xe4) {\n                var region = input[i];\n                // decoded.region = region;\n                decoded.dwell_time_avg = parseBytesToInt(input, i + 1, 2);\n                decoded.dwell_time_max = parseBytesToInt(input, i + 3, 2);\n                i += 5;\n            }\n            // TIMESTAMP\n            //else if (channel_id === 0x0f && channel_type === 0x85) {\n               // decoded.timestamp = readUInt32LE(bytes.slice(i, i + 4));\n                //i += 4;\n            //}\n        }\n    }\n\n    output.telemetry = [{\n        ts: timestamp,\n        values: decoded\n    }];\n    // --- Decoding code --- //\n    return output;\n}\n\n// --- attributes and telemetry objects ---\nvar telemetry = [];\nvar attributes = {};\n// --- attributes and telemetry objects ---\n\n// --- Timestamp parsing\nvar dateString = data.time;\ntimestamp = parseDateToTimestamp(dateString);\n// --- Timestamp parsing\n\n// Passing incoming bytes to decodePayload function, to get custom decoding\nvar customDecoding = decodePayload(base64ToBytes(data.data));\n\n\nattributes.eui = data.deviceInfo.devEui;\n\n// Collecting data to result\nif (customDecoding.?telemetry.size() > 0) {\n    if (customDecoding.telemetry instanceof java.util.ArrayList) {\n        foreach(telemetryObj: customDecoding.telemetry) {\n            if (telemetryObj.ts != null && telemetryObj.values != null) {\n                telemetry.add(telemetryObj);\n            }\n        }\n    } else {\n        telemetry.putAll(customDecoding.telemetry);\n    }\n}\n\nif (customDecoding.?attributes.size() > 0) {\n    attributes.putAll(customDecoding.attributes);\n}\n\n// You can add some keys manually to attributes or telemetry\nattributes.eui = data.deviceInfo.?devEui;\nattributes.devAddr = data.devAddr;\nattributes.fPort = data.fPort;\nattributes.applicationId = data.deviceInfo.?applicationId;\nattributes.applicationName = data.deviceInfo.?applicationName;\nattributes.tenantId = data.deviceInfo.?tenantId;\nattributes.tenantName = data.deviceInfo.?tenantName;\nattributes.deviceProfileId = data.deviceInfo.?deviceProfileId;\nattributes.deviceProfileName = data.deviceInfo.?deviceProfileName;\nattributes.frequency = data.txInfo.?frequency;\nattributes.bandwidth = data.txInfo.?modulation.?lora.?bandwidth;\nattributes.spreadingFactor = data.txInfo.?modulation.?lora.?spreadingFactor;\nattributes.codeRate = data.txInfo.?modulation.?lora.?codeRate;\n\nif(Boolean.parseBoolean(metadata[\"includeGatewayInfo\"])) {\n   var gatewayInfo = getGatewayInfo();\n   var addDataToTelemetry = {};\n   addDataToTelemetry.snr = gatewayInfo.snr;\n   addDataToTelemetry.rssi = gatewayInfo.rssi;\n   addDataToTelemetry.channel = gatewayInfo.channel;\n   addDataToTelemetry.rfChain = gatewayInfo.rfChain;\n   addDataToTelemetry.fCnt = data.fCnt;\n   \n   telemetry = processTelemetryData(telemetry, addDataToTelemetry);\n}\n\nvar result = {\n    deviceName: deviceName,\n    deviceType: deviceType,\n    //  assetName: assetName,\n    //  assetType: assetType,\n    attributes: attributes,\n    telemetry: telemetry\n};\n\naddAdditionalInfoForDeviceMsg(result, customerName, groupName);\n\nreturn result;\n\nfunction addAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName) {\n    if (customerName != null) {\n        deviceInfo.customerName = customerName;\n    }\n    if (groupName != null) {\n        deviceInfo.groupName = groupName;\n    }\n}\n\nfunction parseDateToTimestamp(dateString) {\n    var date = new Date(dateString);\n    var timestamp = date.getTime();\n   \n    // If we cannot parse timestamp - we will use the current timestamp\n    if (timestamp == -1) {\n        timestamp = Date.now();\n    }\n    \n    return timestamp;\n}\n\nfunction getGatewayInfo() {\n    var gatewayList = data.rxInfo;\n    var maxRssi = Integer.MIN_VALUE;\n    var gatewayInfo = {};\n    \n    foreach (gateway : gatewayList) {\n        if(gateway.rssi > maxRssi) {\n            maxRssi = gateway.rssi;\n            gatewayInfo = gateway;\n        }\n    }\n    \n    return gatewayInfo;\n}\n\nfunction processTelemetryData(telemetry, addDataToTelemetry) {\n    if (telemetry.size >= 1) {\n        telemetry = addDataToTelemetries(telemetry, addDataToTelemetry);\n    }\n    else {\n        telemetry.add(addDataToTelemetry);\n    }\n    \n    return telemetry;\n}\n\nfunction addDataToTelemetries(telemetries, addDataToTelemetry) {\n    foreach(telemetry : telemetries) {\n        foreach(element : addDataToTelemetry.entrySet()) {\n            if(!telemetry[\"values\"].keys.contains(element.key)) {\n                telemetry[\"values\"][element.key] = element.value;\n            }\n        } \n    }\n    \n    return telemetries;\n}\n\nfunction readVersion(byteList) {\n    var temp = \"\";\n    for (int idx = 0; idx < byteList.length; idx++) {\n        temp += (byteList[idx] & 0xFF);\n        if (idx < byteList.length - 1) {\n            temp += \".\";\n        }\n    }\n    \n    return temp;\n}\n\nfunction readSerialNumber(byteList) {\n    var serialNumberResult = \"\";\n    for (int idx = 0; idx < byteList.length; idx++) {\n        serialNumberResult += String.format(\"%02x\", byteList[idx] & 0xFF);\n    }\n    \n    return serialNumberResult;\n}",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "tenantId",
      "tenantName",
      "applicationId",
      "applicationName",
      "deviceProfileId",
      "deviceProfileName",
      "devAddr",
      "fPort",
      "frequency",
      "bandwidth",
      "spreadingFactor",
      "codeRate",
      "channel",
      "rfChain",
      "eui",
      "battery"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}