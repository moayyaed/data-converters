{
  "name": "Loriot Uplink Converter for Milesight TS201",
  "type": "UPLINK",
  "debugMode": true,
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
    "tbelDecoder": "var data = decodeToJson(payload);\nvar deviceName = data.EUI;\nvar deviceType = \"TS201\";\nvar groupName = null; // If groupName is not null - created device will be added to the entity group with such name.\nvar customerName = null; // If customerName is not null - created devices will be assigned to customer with such name. \n\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// If you want to parse incoming data somehow, you can add your code to this function.\n// input: bytes\n// expected output:\n//  {\n//    \"attributes\": {\"attributeKey\": \"attributeValue\"},\n//    \"telemetry\": {\"telemetryKey\": \"telemetryValue\"}\n//  }\n\nfunction decodePayload(input) {\n    var output = { attributes: {}, telemetry: []};\n    \n    var decoded = {};\n    var historyDataList = [];\n    for (var i = 0; i < input.length - 2; ) {\n        var channel_id = input[i++] & 0xff;\n        var channel_type = input[i++] & 0xff;\n\n        // IPSO VERSION\n        if (channel_id === 0xff && channel_type === 0x01) {\n            output.attributes.ipso_version = readProtocolVersion(input[i]);\n            i += 1;\n        }\n        // HARDWARE VERSION\n        else if (channel_id === 0xff && channel_type === 0x09) {\n            output.attributes.hardware_version = readHardwareVersion(input.slice(i, i+2));\n            i += 2;\n        }\n        // FIRMWARE VERSION\n        else if (channel_id === 0xff && channel_type === 0x0a) {\n            output.attributes.firmware_version = readFirmwareVersion(input.slice(i, i+2));\n            i += 2;\n        }\n        // DEVICE STATUS\n        else if (channel_id === 0xff && channel_type === 0x0b) {\n            decoded.device_status = \"on\";\n            i += 1;\n        }\n        // LORAWAN CLASS TYPE\n        else if (channel_id === 0xff && channel_type === 0x0f) {\n            output.attributes.lorawan_class = readLoRaWANType(input[i]);\n            i += 1;\n        }\n        // SERIAL NUMBER\n        else if (channel_id === 0xff && channel_type === 0x16) {\n            output.attributes.sn = readSerialNumber(input.slice(i, i+2));\n            i += 8;\n        }\n        // TSL VERSION\n        else if (channel_id === 0xff && channel_type === 0xff) {\n            output.attributes.tsl_version = readTslVersion(input.slice(i, i+2));\n            i += 2;\n        }\n        // BATTERY\n        else if (channel_id === 0x01 && channel_type === 0x75) {\n            decoded.battery = input[i];\n            i += 1;\n        }\n        // TEMPERATURE\n        else if (channel_id === 0x03 && channel_type === 0x67) {\n            decoded.temperature = getTemperatureValue(input.slice(i, i+2));\n            i += 2;\n        }\n        // TEMPERATURE THRESHOLD ALARM\n        else if (channel_id === 0x83 && channel_type === 0x67) {\n            decoded.temperature = getTemperatureValue(input.slice(i, i+2));\n            decoded.temperature_alarm = readAlarmType(input[i + 2]);\n            i += 3;\n        }\n        // TEMPERATURE MUTATION ALARM\n        else if (channel_id === 0x93 && channel_type === 0x67) {\n            decoded.temperature = getTemperatureValue(input.slice(i, i+2));\n            decoded.temperature_mutation = parseBytesToInt(input, i + 2, 2, false) / 10;\n            decoded.temperature_alarm = readAlarmType(input[i + 4]);\n            i += 5;\n        }\n        // TEMPERATURE ERROR\n        else if (channel_id === 0xb3 && channel_type === 0x67) {\n            decoded.temperature_error = readErrorType(input[i]);\n            i += 1;\n        }\n        // HISTORY DATA\n        else if (channel_id === 0x20 && channel_type === 0xce) {\n            var event = input[i + 4];\n            var historyData = {\n                ts : parseBytesToInt(input, i, 4, false) * 1000,\n                values : {\n                    temperature : getTemperatureValue(input.slice(i + 5, i + 7)),\n                    read_status : readStatus((event >>> 4) & 0x0f),\n                    event_type : readType(event & 0x0f)\n                }\n            };\n\n           historyDataList.push(historyData);\n           i += 7;\n        }\n    }\n        \n    output.telemetry = [{\n        ts: timestamp,\n        values: decoded\n    }];\n    \n    output.telemetry.addAll(historyDataList);\n\n    // --- Decoding code --- //\n    return output;\n}\n\n// --- attributes and telemetry objects ---\nvar telemetry = [];\nvar attributes = {};\n// --- attributes and telemetry objects ---\n\n// --- Timestamp parsing\ntimestamp = data.ts;\n// --- Timestamp parsing\n\n// Message parsing\n// To avoid paths in the decoded objects we passing false value to function as \"pathInKey\" argument.\n// Warning: pathInKey can cause already found fields to be overwritten with the last value found.\n\nvar uplinkDataList = [];\n\n// Passing incoming bytes to decodePayload function, to get custom decoding\nvar customDecoding = decodePayload(hexToBytes(data.data));\n\n// Collecting data to result\nif (customDecoding.?telemetry.size() > 0) {\n    if (customDecoding.telemetry instanceof java.util.ArrayList) {\n        foreach(telemetryObj: customDecoding.telemetry) {\n            if (telemetryObj.ts != null && telemetryObj.values != null) {\n                telemetry.add(telemetryObj);\n            }\n        }\n    } else {\n        telemetry.putAll(customDecoding.telemetry);\n    }\n}\n\nif (customDecoding.?attributes.size() > 0) {\n    attributes.putAll(customDecoding.attributes);\n}\n\n// You can add some keys manually to attributes or telemetry\nattributes.eui = data.EUI;\nattributes.fPort = data.port;\nattributes.frequency = data.freq;\n\nvar isIncludeGatewayInfo = metadata[\"includeGatewayInfo\"];\nif(isIncludeGatewayInfo == true) {\n    var addDataToTelemetry = {};\n    addDataToTelemetry.rssi = data.rssi;\n    addDataToTelemetry.seqno = data.seqno;\n    addDataToTelemetry.snr = data.snr;\n    addDataToTelemetry.ack = data.ack;\n    addDataToTelemetry.toa = data.toa;\n    addDataToTelemetry.fCnt = data.fcnt;\n    \n   telemetry = processTelemetryData(telemetry, addDataToTelemetry);\n}\n\nvar deviceInfo = {\n    deviceName: deviceName,\n    deviceType: deviceType,\n//  assetName: assetName,\n//  assetType: assetType,\n    attributes: attributes,\n    telemetry: telemetry, \n};\n\naddAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName);\n\nuplinkDataList.add(deviceInfo);\n\nvar gatewayDeviceNamePrefix = \"Gateway \";\nvar gatewayDeviceType = \"Lora gateway\";\nvar gatewayGroupName = null; // If gatewayGroupName is not null - created device will be added to the entity group with such name.\n\nif (data.cmd == \"gw\") {\n    foreach( gatewayInfo : data.gws ) {\n        var addGatewayInfo = {};\n\n        // You can add some keys manually telemetry\n        addGatewayInfo.rssi = gatewayInfo.rssi;\n        addGatewayInfo.snr = gatewayInfo.snr;\n        // You can add some keys manually telemetry\n        \n        var gatewayInfoMsg = {\n            deviceName: gatewayDeviceNamePrefix + gatewayInfo.gweui,\n            deviceType: gatewayDeviceType,\n            telemetry: [{\n                \"ts\": gatewayInfo.ts,\n                \"values\": addGatewayInfo\n            }],\n            attributes: {\n                eui: gatewayInfo.gweui\n            }\n        };\n        addAdditionalInfoForDeviceMsg(gatewayInfoMsg, customerName, gatewayGroupName);\n        uplinkDataList.add(gatewayInfoMsg);\n    }\n}\n\nreturn uplinkDataList;\n\nfunction addAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName) {\n    if (customerName != null) {\n        deviceInfo.customerName = customerName;\n    }\n    if (groupName != null) {\n        deviceInfo.groupName = groupName;\n    }\n}\n\nfunction processTelemetryData(telemetry, addDataToTelemetry) {\n    if (telemetry.size >= 1) {\n        telemetry = addDataToTelemetries(telemetry, addDataToTelemetry);\n    }\n    else {\n        telemetry.add(addDataToTelemetry);\n    }\n    \n    return telemetry;\n}\n\nfunction addDataToTelemetries(telemetries, addDataToTelemetry) {\n    foreach(telemetry : telemetries) {\n        foreach(element : addDataToTelemetry.entrySet()) {\n            if(!telemetry[\"values\"].keys.contains(element.key)) {\n                telemetry[\"values\"][element.key] = element.value;\n            }\n        } \n    }\n    \n    return telemetries;\n}\n\nfunction getTemperatureValue(temperatureBytes) {\n    var ref = parseBytesToInt(temperatureBytes, 0, 2, false);\n    return (ref > 0x7fff ? ref - 0x10000 : ref) / 10;\n}\n\nfunction readProtocolVersion(inputBytes) {\n    var major = (bytes & 0xf0) >> 4;\n    var minor = bytes & 0x0f;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readHardwareVersion(inputBytes) {\n    var major = bytes[0] & 0xff;\n    var minor = (bytes[1] & 0xff) >> 4;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readFirmwareVersion(inputBytes) {\n    var major = bytes[0] & 0xff;\n    var minor = bytes[1] & 0xff;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readTslVersion(inputBytes) {\n    var major = bytes[0] & 0xff;\n    var minor = bytes[1] & 0xff;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readSerialNumber(inputBytes) {\n    var temp = [];\n    for (var idx = 0; idx < bytes.length; idx++) {\n        temp.push((\"0\" + (bytes[idx] & 0xff).toString(16)).slice(-2));\n    }\n    return temp.join(\"\");\n}\n\nfunction readLoRaWANType(type) {\n    switch (type) {\n        case 0x00:\n            return \"ClassA\";\n        case 0x01:\n            return \"ClassB\";\n        case 0x02:\n            return \"ClassC\";\n        case 0x03:\n            return \"ClassCtoB\";\n        default:\n            return \"Unknown\";\n    }\n}\n\nfunction readAlarmType(type) {\n    switch (type) {\n        case 0x00:\n            return \"Threshold Alarm Release\";\n        case 0x01:\n            return \"Threshold Alarm\";\n        case 0x02:\n            return \"Mutation Alarm\";\n        default:\n            return \"Unknown\";\n    }\n}\n\nfunction readErrorType(type) {\n    switch (type) {\n        case 0x00:\n            return \"Read Error\";\n        case 0x01:\n            return \"Overload\";\n        default:\n            return \"Unknown\";\n    }\n}\n\nfunction readHistoryEvent(type) {\n    switch (type) {\n        case 0x00:\n            return \"Time Update\";\n        case 0x01:\n            return \"Periodic\";\n        case 0x02:\n            return \"Alarm(Threshold or Mutation)\";\n        case 0x03:\n            return \"Alarm Release\";\n        case 0x04:\n            return \"Read Error\";\n        case 0x05:\n            return \"Overload\";\n        default:\n            return \"Unknown\";\n    }\n}\n\nfunction readStatus(type) {\n    switch (type) {\n        case 0x00:\n            return \"Success\";\n        case 0x01:\n            return \"Read Error\";\n        case 0x02:\n            return \"Overload\";\n        default:\n            return \"Unknown\";\n    }\n}\n\nfunction readType(type) {\n    switch (type) {\n        case 0x00:\n            return \"\";\n        case 0x01:\n            return \"Periodic\";\n        case 0x02:\n            return \"Alarm(Threshold or Mutation)\";\n        case 0x03:\n            return \"Alarm Release\";\n        default:\n            return \"Unknown\";\n    }\n}",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "fPort",
      "ack",
      "eui",
      "frequency",
      "dr",
      "battery"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}