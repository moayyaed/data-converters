{
  "name": "Things Stack Community Uplink Converter for Milesight TS201",
  "type": "UPLINK",
  "debugMode": true,
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": null,
    "tbelDecoder": "var data = decodeToJson(payload);\n\nvar deviceName = data.end_device_ids.device_id;\nvar deviceType = \"TS201\";\nvar groupName = null; // If groupName is not null - created device will be added to the entity group with such name.\nvar customerName = null; // If customerName is not null - created devices will be assigned to customer with such name. \n\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// If you want to parse incoming data somehow, you can add your code to this function.\n// input: bytes\n// expected output:\n//  {\n//    \"attributes\": {\"attributeKey\": \"attributeValue\"},\n//    \"telemetry\": [{\"ts\": 1...1, \"values\": {\"telemetryKey\":\"telemetryValue\"}, {\"ts\": 1...2, \"values\":              {\"telemetryKey\":\"telemetryValue\"}}]\n//  }\n\nfunction decodeFrmPayload(input) {\n    var output = {\n        attributes: {}, telemetry: {}\n    };\n    \n    // --- Decoding code --- //\n    var decoded = {};\n    var historyDataList = [];\n    for (var i = 0; i < input.length - 2; ) {\n        var channel_id = input[i++] & 0xff;\n        var channel_type = input[i++] & 0xff;\n\n        // IPSO VERSION\n        if (channel_id === 0xff && channel_type === 0x01) {\n            output.attributes.ipso_version = readProtocolVersion(input[i]);\n            i += 1;\n        }\n        // HARDWARE VERSION\n        else if (channel_id === 0xff && channel_type === 0x09) {\n            output.attributes.hardware_version = readHardwareVersion(java.util.Arrays.copyOfRange(input, i, i + 2));\n            i += 2;\n        }\n        // FIRMWARE VERSION\n        else if (channel_id === 0xff && channel_type === 0x0a) {\n            output.attributes.firmware_version = readFirmwareVersion(java.util.Arrays.copyOfRange(input, i, i + 2));\n            i += 2;\n        }\n        // DEVICE STATUS\n        else if (channel_id === 0xff && channel_type === 0x0b) {\n            decoded.device_status = \"on\";\n            i += 1;\n        }\n        // LORAWAN CLASS TYPE\n        else if (channel_id === 0xff && channel_type === 0x0f) {\n            output.attributes.lorawan_class = readLoRaWANType(input[i]);\n            i += 1;\n        }\n        // SERIAL NUMBER\n        else if (channel_id === 0xff && channel_type === 0x16) {\n            output.attributes.sn = readSerialNumber(java.util.Arrays.copyOfRange(input, i, i + 8));\n            i += 8;\n        }\n        // TSL VERSION\n        else if (channel_id === 0xff && channel_type === 0xff) {\n            output.attributes.tsl_version = readTslVersion(java.util.Arrays.copyOfRange(input, i, i + 2));\n            i += 2;\n        }\n        // BATTERY\n        else if (channel_id === 0x01 && channel_type === 0x75) {\n            decoded.battery = input[i];\n            i += 1;\n        }\n        // TEMPERATURE\n        else if (channel_id === 0x03 && channel_type === 0x67) {\n            decoded.temperature = getTemperatureValue(java.util.Arrays.copyOfRange(input, i, i + 2));\n            i += 2;\n        }\n        // TEMPERATURE THRESHOLD ALARM\n        else if (channel_id === 0x83 && channel_type === 0x67) {\n            decoded.temperature = getTemperatureValue(java.util.Arrays.copyOfRange(input, i, i + 2));\n            decoded.temperature_alarm = readAlarmType(input[i + 2]);\n            i += 3;\n        }\n        // TEMPERATURE MUTATION ALARM\n        else if (channel_id === 0x93 && channel_type === 0x67) {\n            decoded.temperature = getTemperatureValue(java.util.Arrays.copyOfRange(input, i, i + 2));\n            decoded.temperature_mutation = parseBytesToInt(input, i + 2, 2, false) / 10;\n            decoded.temperature_alarm = readAlarmType(input[i + 4]);\n            i += 5;\n        }\n        // TEMPERATURE ERROR\n        else if (channel_id === 0xb3 && channel_type === 0x67) {\n            decoded.temperature_error = readErrorType(input[i]);\n            i += 1;\n        }\n        // HISTORY DATA\n        else if (channel_id === 0x20 && channel_type === 0xce) {\n            var event = input[i + 4];\n            var historyData = {\n                ts : parseBytesToInt(input, i, 4, false) * 1000,\n                values : {\n                    temperature : getTemperatureValue(java.util.Arrays.copyOfRange(input, i + 5, i + 7)),\n                    read_status : readStatus((event >>> 4) & 0x0f),\n                    event_type : readType(event & 0x0f)\n                }\n            };\n\n           historyDataList.push(historyData);\n           i += 7;\n        }\n    }\n    \n    output.telemetry = [{\n        ts: timestamp,\n        values: decoded\n    }];\n    \n    output.telemetry.addAll(historyDataList);\n    // --- Decoding code --- //\n    return output;\n}\n\n\n// --- attributes and telemetry objects ---\nvar telemetry = [];\nvar attributes = {};\n// --- attributes and telemetry objects ---\n\n// --- Timestamp parsing\nvar dateString = data.uplink_message.received_at;\n// If data is simulated or device doesn't send his own date string - we will use date from upcoming message, set by network server\nif ((data.simulated != null && data.simulated) || dateString == null) {\n    dateString = data.received_at;\n}\ntimestamp = parseDateToTimestamp(dateString);\n// --- Timestamp parsing\n\n// Message parsing\n// To avoid paths in the decoded objects we passing false value to function as \"pathInKey\" argument.\n// Warning: pathInKey can cause already found fields to be overwritten with the last value found, e.g. receive_at from uplink_message will be written receive_at in the root.\n\n// Passing incoming bytes to decodeFrmPayload function, to get custom decoding\nvar customDecoding = {};\nif (data.uplink_message.get(\"frm_payload\") != null) {\n    customDecoding = decodeFrmPayload(base64ToBytes(data.uplink_message.frm_payload));\n}\n\n// Collecting data to result\nif (customDecoding.?telemetry.size() > 0) {\n    if (customDecoding.telemetry instanceof java.util.ArrayList) {\n        foreach(telemetryObj: customDecoding.telemetry) {\n            if (telemetryObj.ts != null && telemetryObj.values != null) {\n                telemetry.add(telemetryObj);\n            }\n        }\n    } else {\n        telemetry.putAll(customDecoding.telemetry);\n    }\n}\n\nif (customDecoding.?attributes.size() > 0) {\n    attributes.putAll(customDecoding.attributes);\n}\n\n// You can add some keys manually to attributes or telemetry\nvar applicationId = data.end_device_ids.?application_ids.?application_id;\nvar devAddr = data.end_device_ids.?dev_addr;\nvar spreadingFactor = data.uplink_message.?settings.?data_rate.?lora.?spreading_factor;\nvar codeRate = data.uplink_message.?settings.?data_rate.?lora.?coding_rate;\nvar tenantId = data.uplink_message.?network_ids.?tenant_id;\nattributes.eui = data.end_device_ids.dev_eui;\nattributes.fPort = data.uplink_message.f_port;\nattributes.applicationId = applicationId;\nattributes.devAddr = devAddr;\nattributes.spreadingFactor = spreadingFactor;\nattributes.codeRate = codeRate;\nattributes.tenantId = tenantId;\nattributes.device_id = data.end_device_ids.?device_id;\nattributes.join_eui = data.end_device_ids.?join_eui;\nattributes.net_id = data.uplink_message.?network_ids.?net_id;\nattributes.cluster_id = data.uplink_message.?network_ids.?cluster_id;\nattributes.cluster_adress = data.uplink_message.?network_ids.?cluster_address;\nattributes.bandwidth = data.uplink_message.?settings.?data_rate.?lora.?bandwidth;\nattributes.frequency = data.uplink_message.?settings.?frequency;\n\n\nvar gatewayInfo = getGatewayInfo();\nvar addDataToTelemetry = {};\naddDataToTelemetry.snr = gatewayInfo.snr;\naddDataToTelemetry.rssi = gatewayInfo.rssi;\naddDataToTelemetry.channel = gatewayInfo.channel_index;\naddDataToTelemetry.consumed_airtime = data.uplink_message.?consumed_airtime;\naddDataToTelemetry.fCnt = data.uplink_message.?f_cnt;\n\nvar isIncludeGatewayInfo = metadata[\"includeGatewayInfo\"];\nif(isIncludeGatewayInfo == true) {\n   telemetry = processTelemetryData(telemetry, addDataToTelemetry);\n}\n\nvar result = {\n    deviceName: deviceName,\n    deviceType: deviceType,\n//  assetName: assetName,\n//  assetType: assetType,\n    attributes: attributes,\n    telemetry: telemetry\n};\n\naddAdditionalInfoForDeviceMsg(result, customerName, groupName);\n\nreturn result;\n\n\nfunction addAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName) {\n    if (customerName != null) {\n        deviceInfo.customerName = customerName;\n    }\n    if (groupName != null) {\n        deviceInfo.groupName = groupName;\n    }\n}\n\nfunction parseDateToTimestamp(dateString) {\n    var date = new Date(dateString);\n    var timestamp = date.getTime();\n   \n    // If we cannot parse timestamp - we will use the current timestamp\n    if (timestamp == -1) {\n        timestamp = Date.now();\n    }\n    \n    return timestamp;\n}\n\nfunction getGatewayInfo() {\n    var gatewayList = data.uplink_message.?rx_metadata;\n    var maxRssi = Integer.MIN_VALUE;\n    var gatewayInfo = {};\n    \n    foreach (gateway : gatewayList) {\n        if(gateway.rssi > maxRssi) {\n            maxRssi = gateway.rssi;\n            gatewayInfo = gateway;\n        }\n    }\n    \n    return gatewayInfo;\n}\n\nfunction processTelemetryData(telemetry, addDataToTelemetry) {\n    if (telemetry.size >= 1) {\n        telemetry = addDataToTelemetries(telemetry, addDataToTelemetry);\n    }\n    else {\n        telemetry.add(addDataToTelemetry);\n    }\n    \n    return telemetry;\n}\n\nfunction addDataToTelemetries(telemetries, addDataToTelemetry) {\n    foreach(telemetry : telemetries) {\n        foreach(element : addDataToTelemetry.entrySet()) {\n            if(!telemetry[\"values\"].keys.contains(element.key)) {\n                telemetry[\"values\"][element.key] = element.value;\n            }\n        } \n    }\n    \n    return telemetries;\n}\n\nfunction getTemperatureValue(temperatureBytes) {\n    var ref = parseBytesToInt(temperatureBytes, 0, 2, false);\n    return (ref > 0x7fff ? ref - 0x10000 : ref) / 10;\n}\n\nfunction readProtocolVersion(bytes) {\n    var major = (bytes & 0xf0) >> 4;\n    var minor = bytes & 0x0f;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readHardwareVersion(bytes) {\n    var major = bytes[0] & 0xff;\n    var minor = (bytes[1] & 0xff) >> 4;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readFirmwareVersion(bytes) {\n    var major = bytes[0] & 0xff;\n    var minor = bytes[1] & 0xff;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readTslVersion(bytes) {\n    var major = bytes[0] & 0xff;\n    var minor = bytes[1] & 0xff;\n    return \"v\" + major + \".\" + minor;\n}\n\nfunction readSerialNumber(bytes) {\n    var temp = [];\n    for (var idx = 0; idx < bytes.length; idx++) {\n        temp.push((\"0\" + (bytes[idx] & 0xff).toString(16)).slice(-2));\n    }\n    return temp.join(\"\");\n}\n\nfunction readLoRaWANType(type) {\n    switch (type) {\n        case 0x00:\n            return \"ClassA\";\n        case 0x01:\n            return \"ClassB\";\n        case 0x02:\n            return \"ClassC\";\n        case 0x03:\n            return \"ClassCtoB\";\n        default:\n            return \"Unknown\";\n    }\n}\n\nfunction readAlarmType(type) {\n    switch (type) {\n        case 0x00:\n            return \"Threshold Alarm Release\";\n        case 0x01:\n            return \"Threshold Alarm\";\n        case 0x02:\n            return \"Mutation Alarm\";\n        default:\n            return \"Unknown\";\n    }\n}\n\nfunction readErrorType(type) {\n    switch (type) {\n        case 0x00:\n            return \"Read Error\";\n        case 0x01:\n            return \"Overload\";\n        default:\n            return \"Unknown\";\n    }\n}\n\nfunction readHistoryEvent(type) {\n    switch (type) {\n        case 0x00:\n            return \"Time Update\";\n        case 0x01:\n            return \"Periodic\";\n        case 0x02:\n            return \"Alarm(Threshold or Mutation)\";\n        case 0x03:\n            return \"Alarm Release\";\n        case 0x04:\n            return \"Read Error\";\n        case 0x05:\n            return \"Overload\";\n        default:\n            return \"Unknown\";\n    }\n}\n\nfunction readStatus(type) {\n    switch (type) {\n        case 0x00:\n            return \"Success\";\n        case 0x01:\n            return \"Read Error\";\n        case 0x02:\n            return \"Overload\";\n        default:\n            return \"Unknown\";\n    }\n}\n\nfunction readType(type) {\n    switch (type) {\n        case 0x00:\n            return \"\";\n        case 0x01:\n            return \"Periodic\";\n        case 0x02:\n            return \"Alarm(Threshold or Mutation)\";\n        case 0x03:\n            return \"Alarm Release\";\n        default:\n            return \"Unknown\";\n    }\n}",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "fPort",
      "bandwidth",
      "frequency",
      "net_id",
      "cluster_id",
      "cluster_address",
      "device_id",
      "join_eui",
      "battery",
      "eui",
      "channel",
      "applicationId",
      "devAddr",
      "spreadingFactor",
      "codeRate",
      "tenantId"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}