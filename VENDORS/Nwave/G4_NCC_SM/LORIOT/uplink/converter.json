{
  "name": "Loriot Uplink Converter for Nwave G4_NCC_SM",
  "type": "UPLINK",
  "debugMode": true,
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
    "tbelDecoder": "var data = decodeToJson(payload);\nvar deviceName = \"G4 Car Counter SM \" + data.EUI;\nvar deviceType = \"Parking sensor\";\nvar groupName = null; // If groupName is not null - created device will be added to the entity group with such name.\nvar customerName = null; // If customerName is not null - created devices will be assigned to customer with such name. \n\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// If you want to parse incoming data somehow, you can add your code to this function.\n// input: bytes\n// expected output:\n//  {\n//    \"attributes\": {\"attributeKey\": \"attributeValue\"},\n//    \"telemetry\": {\"telemetryKey\": \"telemetryValue\"}\n//  }\n\nfunction decodePayload(input) {\n    var output = { attributes: {}, telemetry: []};\n    \n    // --- Decoding code --- //\n    var decoded = {};\n    var fPort = data.port;\n\n    if (fPort === 1) { // Counter update\n        decoded.type = \"counter_update\";\n        decoded.counter_value = (input[0] << 8) | input[1];\n    } else if (fPort === 2) { // Heartbeat\n        decoded.type = \"heartbeat\";\n        decoded.hw_health_status = input[0] & 0x7F;\n        var batteryVoltageMv = 2500 + input[1] * 4;\n        decoded.battery_voltage = batteryVoltageMv / 1000;\n\n        var batteryMeanVoltageMv = 2500 + input[2] * 4;\n        decoded.battery_voltage_mean_24h = batteryMeanVoltageMv / 1000;\n\n    } else if (fPort === 3) { // Startup\n        decoded.type = \"startup\";\n        decoded.firmware_version = input[0] + \".\" + input[1] + \".\" + input[2];\n        decoded.reset_cause = [\n            \"rejoining_lorawan_network\",\n            \"watchdog\",\n            \"power_on\",\n            \"user_request\",\n            undefined,\n            undefined,\n            \"brownout\",\n            \"other\"\n        ];\n        \n        var resetCauseIndex = input[3];\n        if (resetCauseIndex >= 0 && resetCauseIndex < resetCauses.length) {\n            decoded.reset_cause = resetCauses[Integer.parseInt(resetCauseIndex)];\n        } else {\n            decoded.reset_cause = \"unknown\";\n        }\n    \n    } else if (fPort === 6) { // Debug\n        decoded.type = \"debug\";\n        decoded.bytes = input.bytes;\n    }\n    \n    output.telemetry = [{\n        ts: timestamp,\n        values: decoded\n    }];\n\n    // --- Decoding code --- //\n    return output;\n}\n\n// --- attributes and telemetry objects ---\nvar telemetry = [];\nvar attributes = {};\n// --- attributes and telemetry objects ---\n\n// --- Timestamp parsing\ntimestamp = data.ts;\n// --- Timestamp parsing\n\n// Message parsing\n// To avoid paths in the decoded objects we passing false value to function as \"pathInKey\" argument.\n// Warning: pathInKey can cause already found fields to be overwritten with the last value found.\n\nvar uplinkDataList = [];\n\n// Passing incoming bytes to decodePayload function, to get custom decoding\nvar customDecoding = decodePayload(hexToBytes(data.data));\n\n// Collecting data to result\nif (customDecoding.?telemetry.size() > 0) {\n    if (customDecoding.telemetry instanceof java.util.ArrayList) {\n        foreach(telemetryObj: customDecoding.telemetry) {\n            if (telemetryObj.ts != null && telemetryObj.values != null) {\n                telemetry.add(telemetryObj);\n            }\n        }\n    } else {\n        telemetry.putAll(customDecoding.telemetry);\n    }\n}\n\nif (customDecoding.?attributes.size() > 0) {\n    attributes.putAll(customDecoding.attributes);\n}\n\n// You can add some keys manually to attributes or telemetry\nattributes.eui = data.EUI;\nattributes.fPort = data.port;\nattributes.frequency = data.freq;\n\nvar isIncludeGatewayInfo = metadata[\"includeGatewayInfo\"];\nif(isIncludeGatewayInfo == true) {\n    var addDataToTelemetry = {};\n    addDataToTelemetry.rssi = data.rssi;\n    addDataToTelemetry.seqno = data.seqno;\n    addDataToTelemetry.snr = data.snr;\n    addDataToTelemetry.ack = data.ack;\n    addDataToTelemetry.toa = data.toa;\n    addDataToTelemetry.fCnt = data.fcnt;\n    \n   telemetry = processTelemetryData(telemetry, addDataToTelemetry);\n}\n\nvar deviceInfo = {\n    deviceName: deviceName,\n    deviceType: deviceType,\n//  assetName: assetName,\n//  assetType: assetType,\n    attributes: attributes,\n    telemetry: telemetry, \n};\n\naddAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName);\n\nuplinkDataList.add(deviceInfo);\n\nvar gatewayDeviceNamePrefix = \"Gateway \";\nvar gatewayDeviceType = \"Lora gateway\";\nvar gatewayGroupName = null; // If gatewayGroupName is not null - created device will be added to the entity group with such name.\n\nif (data.cmd == \"gw\") {\n    foreach( gatewayInfo : data.gws ) {\n        var addGatewayInfo = {};\n\n        // You can add some keys manually telemetry\n        addGatewayInfo.rssi = gatewayInfo.rssi;\n        addGatewayInfo.snr = gatewayInfo.snr;\n        // You can add some keys manually telemetry\n        \n        var gatewayInfoMsg = {\n            deviceName: gatewayDeviceNamePrefix + gatewayInfo.gweui,\n            deviceType: gatewayDeviceType,\n            telemetry: [{\n                \"ts\": gatewayInfo.ts,\n                \"values\": addGatewayInfo\n            }],\n            attributes: {\n                eui: gatewayInfo.gweui\n            }\n        };\n        addAdditionalInfoForDeviceMsg(gatewayInfoMsg, customerName, gatewayGroupName);\n        uplinkDataList.add(gatewayInfoMsg);\n    }\n}\n\nreturn uplinkDataList;\n\nfunction addAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName) {\n    if (customerName != null) {\n        deviceInfo.customerName = customerName;\n    }\n    if (groupName != null) {\n        deviceInfo.groupName = groupName;\n    }\n}\n\nfunction processTelemetryData(telemetry, addDataToTelemetry) {\n    if (telemetry.size > 1) {\n        telemetry = addDataToMultipleTelemetries(telemetry, addDataToTelemetry);\n    }\n    else if (telemetry.size == 1) {\n        telemetry = addDataToSingleTelemetry(telemetry, addDataToTelemetry);\n    }\n    else {\n        telemetry.add(addDataToTelemetry);\n    }\n    \n    return telemetry;\n}\n\nfunction addDataToMultipleTelemetries(telemetry, addDataToTelemetry) {\n    foreach(element : addDataToTelemetry.entrySet()) {\n        if(!telemetry[0][\"values\"].keys.contains(element.key)) {\n            telemetry[0][\"values\"][element.key] = element.value;\n        }\n        if (!telemetry[1][\"values\"].keys.contains(element.key)) {\n            telemetry[1][\"values\"][element.key] = element.value;\n        }\n    }\n    \n    return telemetry;\n}\n\nfunction addDataToSingleTelemetry(telemetry, addDataToTelemetry) {\n    foreach(element : addDataToTelemetry.entrySet()) {\n            if(!telemetry[0][\"values\"].keys.contains(element.key)) {\n                telemetry[0][\"values\"][element.key] = element.value;\n            }\n    }\n    \n    return telemetry;\n}\n\nfunction calculatePreviousState(compressedDuration) {\n    var state = {};\n    state.previous_state_duration_overflow = false;\n\n    if (compressedDuration < 90) {\n      state.previous_state_duration = compressedDuration;\n      state.previous_state_duration_error = 0;\n    } else if (compressedDuration >= 90 && compressedDuration < 120) {\n      state.previous_state_duration = 90 + (compressedDuration - 90) * 5;\n      state.previous_state_duration_error = 4;\n    } else if (compressedDuration >= 120 && compressedDuration < 127) {\n      result.previous_state_duration = 240 + (compressedDuration - 120) * 60;\n      result.previous_state_duration_error = 59;\n    } else if (compressedDuration === 127) {\n      state.previous_state_duration = 660;\n      state.previous_state_duration_error = null;\n      state.previous_state_duration_overflow = true;\n    }\n\n    return state;\n  }",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "fPort",
      "ack",
      "eui",
      "frequency",
      "dr",
      "type"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}