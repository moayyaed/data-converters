{
  "name": "Loriot Uplink Converter for Netvox R718A",
  "type": "UPLINK",
  "debugMode": true,
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
    "tbelDecoder": "var data = decodeToJson(payload);\nvar deviceName = data.EUI;\nvar deviceType = \"R718A\";\nvar groupName = null; // If groupName is not null - created device will be added to the entity group with such name.\nvar customerName = null; // If customerName is not null - created devices will be assigned to customer with such name. \n\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// If you want to parse incoming data somehow, you can add your code to this function.\n// input: bytes\n// expected output:\n//  {\n//    \"attributes\": {\"attributeKey\": \"attributeValue\"},\n//    \"telemetry\": {\"telemetryKey\": \"telemetryValue\"}\n//  }\n\nfunction decodePayload(input) {\n    var output = { attributes: {}, telemetry: []};\n    \n    var fPort = data.port;\n    var decoded = {};\n    if(fPort == 6) {\n        if(input[1] == 0x0B && input[2] == 0x01) {\n            decoded.battery_voltage = parseBytesToInt(input, 3, 1) / 10;\n            decoded.temperature = parseBytesToInt(input, 4, 2) / 100;\n            decoded.humidity = parseBytesToInt(input, 6, 2) / 100;\n        }\n        if(input[1] == 0x0B && input[2] == 0x00) {\n            output.attributes.softwareVersion = input[3] / 10;\n            output.attributes.hardwareVersion = input[4];\n            output.attributes.dateCode = decodeDateCodeToTimestamp(java.util.Arrays.copyOfRange(input, 5, 9));\n        }\n    }\n    if(fPort == 7) {\n        if(input[1] == 0x0B && (input[0] & 0xff) == 0x81) {\n            decoded.cmd = \"configReportRsp\";\n            decoded.status = input[2] == 0x00 ? \"success\" : \"failure\";\n        }\n        if(input[1] == 0x0B && (input[0] & 0xff) == 0x82) {\n            decoded.cmd = \"readConfigReportRsp\";\n            decoded.minTime = parseBytesToInt(input, 2, 2);\n            decoded.maxTime = parseBytesToInt(input, 4, 2);\n            decoded.batteryChange = parseBytesToInt(input, 6, 1) / 10;\n            decoded.tempChange = parseBytesToInt(input, 7, 2) / 100;\n            decoded.humiChange = parseBytesToInt(input, 9, 2) / 100;\n        }\n    }\n    if(fPort == 14) {\n        if((input[0] & 0xff) == 0x81) {\n            decoded.cmd = \"setGlobalCalibrateRsp\";\n            decoded.sensor_type = input[1] == 0x01 ? \"temperature sensor\" : \"humidity sensor\"; \n            decoded.channel = input[2] == 0x00 ? \"temperature\" : \"humidity\";\n            decoded.status = input[3] == 0x00 ? \"success\" : \"failure\";\n        }\n        if((input[0] & 0xff) == 0x82) {\n            decoded.cmd = \"getGlobalCalibrateRsp\";\n            decoded.sensor_type = setSensorType(input[1]);\n            decoded.channel = setChannel(input[2]);\n            decoded.multiplier = parseBytesToInt(input, 3, 2) & 0xff;\n            decoded.divisor = parseBytesToInt(input, 5, 2) & 0xff;\n            decoded.deltValue = parseBytesToInt(input, 7, 2);\n        }\n        if((input[0] & 0xff) == 0x83) {\n            decoded.cmd = \"clearGlobalCalibrateRsp\";\n            decoded.status = input[1] == 0x00 ? \"success\" : \"failure\";\n        }\n    }\n    if(fPort == 0x10) {\n        if((input[0] & 0xff) == 0x81) {\n            decoded.cmd = \"setSensorAlarmThresholdRsp\";\n            decoded.status = input[1] == 0x00 ? \"success\" : \"failure\";\n        }\n        if((input[0] & 0xff) == 0x82) {\n            decoded.cmd = \"getSensorAlarmThresholdRsp\";\n            decoded.channel = setChannel(input[1]);\n            decoded.sensor_type = setSensorType(input[2]);\n            decoded.sensor_high_threshold = parseBytesToInt(input, 3, 4) / 100;\n            decoded.sensor_low_threshold = parseBytesToInt(input, 7, 4) / 100;\n        }\n    }\n    if(fPort == 0x20) {\n        if((input[0] & 0xff) == 0x81) {\n            decoded.cmd = \"setNetvoxLoRaWANRejoinRsp\";\n            decoded.status = input[1] == 0x00 ? \"success\" : \"failure\";\n        }\n        if((input[0] & 0xff) == 0x82) {\n            decoded.cmd = \"getNetvoxLoRaWANRejoinRsp\";\n            decoded.rejoin_check_period = parseBytesToInt(input, 1, 4);\n            decoded.rejoin_threshold = input[5];\n        }\n    }\n        \n    \n    output.telemetry = [{\n        ts: timestamp,\n        values: decoded\n    }];\n\n    // --- Decoding code --- //\n    return output;\n}\n\n// --- attributes and telemetry objects ---\nvar telemetry = [];\nvar attributes = {};\n// --- attributes and telemetry objects ---\n\n// --- Timestamp parsing\ntimestamp = data.ts;\n// --- Timestamp parsing\n\n// Message parsing\n// To avoid paths in the decoded objects we passing false value to function as \"pathInKey\" argument.\n// Warning: pathInKey can cause already found fields to be overwritten with the last value found.\n\nvar uplinkDataList = [];\n\n// Passing incoming bytes to decodePayload function, to get custom decoding\nvar customDecoding = decodePayload(hexToBytes(data.data));\n\n// Collecting data to result\nif (customDecoding.?telemetry.size() > 0) {\n    if (customDecoding.telemetry instanceof java.util.ArrayList) {\n        foreach(telemetryObj: customDecoding.telemetry) {\n            if (telemetryObj.ts != null && telemetryObj.values != null) {\n                telemetry.add(telemetryObj);\n            }\n        }\n    } else {\n        telemetry.putAll(customDecoding.telemetry);\n    }\n}\n\nif (customDecoding.?attributes.size() > 0) {\n    attributes.putAll(customDecoding.attributes);\n}\n\n// You can add some keys manually to attributes or telemetry\nattributes.eui = data.EUI;\nattributes.fPort = data.port;\nattributes.frequency = data.freq;\n\nvar isIncludeGatewayInfo = metadata[\"includeGatewayInfo\"];\nif(isIncludeGatewayInfo == true) {\n    var addDataToTelemetry = {};\n    addDataToTelemetry.rssi = data.rssi;\n    addDataToTelemetry.seqno = data.seqno;\n    addDataToTelemetry.snr = data.snr;\n    addDataToTelemetry.ack = data.ack;\n    addDataToTelemetry.toa = data.toa;\n    addDataToTelemetry.fCnt = data.fcnt;\n    \n   telemetry = processTelemetryData(telemetry, addDataToTelemetry);\n}\n\nvar deviceInfo = {\n    deviceName: deviceName,\n    deviceType: deviceType,\n//  assetName: assetName,\n//  assetType: assetType,\n    attributes: attributes,\n    telemetry: telemetry, \n};\n\naddAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName);\n\nuplinkDataList.add(deviceInfo);\n\nvar gatewayDeviceNamePrefix = \"Gateway \";\nvar gatewayDeviceType = \"Lora gateway\";\nvar gatewayGroupName = null; // If gatewayGroupName is not null - created device will be added to the entity group with such name.\n\nif (data.cmd == \"gw\") {\n    foreach( gatewayInfo : data.gws ) {\n        var addGatewayInfo = {};\n\n        // You can add some keys manually telemetry\n        addGatewayInfo.rssi = gatewayInfo.rssi;\n        addGatewayInfo.snr = gatewayInfo.snr;\n        // You can add some keys manually telemetry\n        \n        var gatewayInfoMsg = {\n            deviceName: gatewayDeviceNamePrefix + gatewayInfo.gweui,\n            deviceType: gatewayDeviceType,\n            telemetry: [{\n                \"ts\": gatewayInfo.ts,\n                \"values\": addGatewayInfo\n            }],\n            attributes: {\n                eui: gatewayInfo.gweui\n            }\n        };\n        addAdditionalInfoForDeviceMsg(gatewayInfoMsg, customerName, gatewayGroupName);\n        uplinkDataList.add(gatewayInfoMsg);\n    }\n}\n\nreturn uplinkDataList;\n\nfunction addAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName) {\n    if (customerName != null) {\n        deviceInfo.customerName = customerName;\n    }\n    if (groupName != null) {\n        deviceInfo.groupName = groupName;\n    }\n}\n\nfunction processTelemetryData(telemetry, addDataToTelemetry) {\n    if (telemetry.size > 1) {\n        telemetry = addDataToMultipleTelemetries(telemetry, addDataToTelemetry);\n    }\n    else if (telemetry.size == 1) {\n        telemetry = addDataToSingleTelemetry(telemetry, addDataToTelemetry);\n    }\n    else {\n        telemetry.add(addDataToTelemetry);\n    }\n    \n    return telemetry;\n}\n\nfunction addDataToMultipleTelemetries(telemetry, addDataToTelemetry) {\n    foreach(element : addDataToTelemetry.entrySet()) {\n        if(!telemetry[0][\"values\"].keys.contains(element.key)) {\n            telemetry[0][\"values\"][element.key] = element.value;\n        }\n        if (!telemetry[1][\"values\"].keys.contains(element.key)) {\n            telemetry[1][\"values\"][element.key] = element.value;\n        }\n    }\n    \n    return telemetry;\n}\n\nfunction addDataToSingleTelemetry(telemetry, addDataToTelemetry) {\n    foreach(element : addDataToTelemetry.entrySet()) {\n            if(!telemetry[0][\"values\"].keys.contains(element.key)) {\n                telemetry[0][\"values\"][element.key] = element.value;\n            }\n    }\n    \n    return telemetry;\n}\n\nfunction decodeDateCodeToTimestamp(bytes) {\n    var hexString = \"\";\n    for (b : bytes) {\n        hexString += String.format(\"%02X\", b);\n    }\n    \n    var yearString = hexString.substring(0, 4);\n    var monthString = hexString.substring(4, 6);\n    var dayString = hexString.substring(6, 8);\n    \n    var year = Integer.parseInt(yearString);\n    var month = Integer.parseInt(monthString); \n    var day = Integer.parseInt(dayString);\n    \n    var dateDateCode = new Date(year, month, day);\n    var timestampDateCode = dateDateCode.getTime();\n    \n    return timestampDateCode;\n}\n\nfunction setChannel(channelByte) {\n    var channel = \"undefined\";\n    \n    if(channelByte == 0x00) {\n        channel = \"temperature\";\n    }\n    else if (channelByte == 0x01) {\n        channel = \"humidity\";\n    }\n    \n    return channel;\n}\n\nfunction setSensorType(sensorTypeBytes) {\n    var sensorType = \"\";\n    \n    if(sensorTypeBytes == 0x01) {\n        sensorType = \"temperature sensor\";\n    }\n    else if (sensorTypeBytes == 0x02) {\n        sensorType = \"humidity sensor\";\n    }\n    else {\n        sensorType = \"disable all sensor thresholdsSet\"\n    }\n    \n    return sensorType;\n}",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "fPort",
      "ack",
      "eui",
      "frequency",
      "dr",
      "battery_volt"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}