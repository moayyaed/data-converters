{
  "name": "Chirp Stack Uplink Converter for Netvox R718A",
  "type": "UPLINK",
  "debugMode": true,
  "configuration": {
    "scriptLang": "TBEL",
    "decoder": null,
    "tbelDecoder": "var data = decodeToJson(payload);\nvar deviceName = data.deviceInfo.deviceName + \" \" +  data.deviceInfo.devEui;\nvar deviceType = \"R718A\";\nvar groupName = null; // If groupName is not null - created device will be added to the entity group with such name.\nvar customerName = null; // If customerName is not null - created devices will be assigned to customer with such name. \n\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// If you want to parse incoming data somehow, you can add your code to this function.\n// input: bytes\n// expected output:\n//  {\n//    \"attributes\": {\"attributeKey\": \"attributeValue\"},\n//    \"telemetry\": [{\"ts\": 1...1, \"values\": {\"telemetryKey\":\"telemetryValue\"}, {\"ts\": 1...2, \"values\":                      {\"telemetryKey\":\"telemetryValue\"}}]\n//  }\n\nfunction decodePayload(input) {\n    var output = {\n        attributes: {},\n        telemetry: []\n    };\n    \n    // --- Decoding code --- //\n    var fPort = data.fPort;\n    var decoded = {};\n    if(fPort == 6) {\n        if(input[1] == 0x0B && input[2] == 0x01) {\n            decoded.battery_voltage = parseBytesToInt(input, 3, 1) / 10;\n            decoded.temperature = parseBytesToInt(input, 4, 2) / 100;\n            decoded.humidity = parseBytesToInt(input, 6, 2) / 100;\n        }\n        if(input[1] == 0x0B && input[2] == 0x00) {\n            output.attributes.softwareVersion = input[3] / 10;\n            output.attributes.hardwareVersion = input[4];\n            output.attributes.dateCode = decodeDateCodeToTimestamp(java.util.Arrays.copyOfRange(input, 5, 9));\n        }\n    }\n    if(fPort == 7) {\n        if(input[1] == 0x0B && (input[0] & 0xff) == 0x81) {\n            decoded.cmd = \"configReportRsp\";\n            decoded.status = input[2] == 0x00 ? \"success\" : \"failure\";\n        }\n        if(input[1] == 0x0B && (input[0] & 0xff) == 0x82) {\n            decoded.cmd = \"readConfigReportRsp\";\n            decoded.minTime = parseBytesToInt(input, 2, 2);\n            decoded.maxTime = parseBytesToInt(input, 4, 2);\n            decoded.batteryChange = parseBytesToInt(input, 6, 1) / 10;\n            decoded.tempChange = parseBytesToInt(input, 7, 2) / 100;\n            decoded.humiChange = parseBytesToInt(input, 9, 2) / 100;\n        }\n    }\n    if(fPort == 14) {\n        if((input[0] & 0xff) == 0x81) {\n            decoded.cmd = \"setGlobalCalibrateRsp\";\n            decoded.sensor_type = input[1] == 0x01 ? \"temperature sensor\" : \"humidity sensor\"; \n            decoded.channel = input[2] == 0x00 ? \"temperature\" : \"humidity\";\n            decoded.status = input[3] == 0x00 ? \"success\" : \"failure\";\n        }\n        if((input[0] & 0xff) == 0x82) {\n            decoded.cmd = \"getGlobalCalibrateRsp\";\n            decoded.sensor_type = setSensorType(input[1]);\n            decoded.channel = setChannel(input[2]);\n            decoded.multiplier = parseBytesToInt(input, 3, 2) & 0xff;\n            decoded.divisor = parseBytesToInt(input, 5, 2) & 0xff;\n            decoded.deltValue = parseBytesToInt(input, 7, 2);\n        }\n        if((input[0] & 0xff) == 0x83) {\n            decoded.cmd = \"clearGlobalCalibrateRsp\";\n            decoded.status = input[1] == 0x00 ? \"success\" : \"failure\";\n        }\n    }\n    if(fPort == 0x10) {\n        if((input[0] & 0xff) == 0x81) {\n            decoded.cmd = \"setSensorAlarmThresholdRsp\";\n            decoded.status = input[1] == 0x00 ? \"success\" : \"failure\";\n        }\n        if((input[0] & 0xff) == 0x82) {\n            decoded.cmd = \"getSensorAlarmThresholdRsp\";\n            decoded.channel = setChannel(input[1]);\n            decoded.sensor_type = setSensorType(input[2]);\n            decoded.sensor_high_threshold = parseBytesToInt(input, 3, 4) / 100;\n            decoded.sensor_low_threshold = parseBytesToInt(input, 7, 4) / 100;\n        }\n    }\n    if(fPort == 0x20) {\n        if((input[0] & 0xff) == 0x81) {\n            decoded.cmd = \"setNetvoxLoRaWANRejoinRsp\";\n            decoded.status = input[1] == 0x00 ? \"success\" : \"failure\";\n        }\n        if((input[0] & 0xff) == 0x82) {\n            decoded.cmd = \"getNetvoxLoRaWANRejoinRsp\";\n            decoded.rejoin_check_period = parseBytesToInt(input, 1, 4);\n            decoded.rejoin_threshold = input[5];\n        }\n    }\n\n    output.telemetry = [{\n        ts: timestamp,\n        values: decoded\n    }];\n    \n    // --- Decoding code --- //\n    return output;\n}\n\n// --- attributes and telemetry objects ---\nvar telemetry = [];\nvar attributes = {};\n// --- attributes and telemetry objects ---\n\n// --- Timestamp parsing\nvar dateString = data.time;\ntimestamp = parseDateToTimestamp(dateString);\n// --- Timestamp parsing\n\n// Passing incoming bytes to decodePayload function, to get custom decoding\nvar customDecoding = decodePayload(base64ToBytes(data.data));\n\n\nattributes.eui = data.deviceInfo.devEui;\n\n// Collecting data to result\nif (customDecoding.?telemetry.size() > 0) {\n    if (customDecoding.telemetry instanceof java.util.ArrayList) {\n        foreach(telemetryObj: customDecoding.telemetry) {\n            if (telemetryObj.ts != null && telemetryObj.values != null) {\n                telemetry.add(telemetryObj);\n            }\n        }\n    } else {\n        telemetry.putAll(customDecoding.telemetry);\n    }\n}\n\nif (customDecoding.?attributes.size() > 0) {\n    attributes.putAll(customDecoding.attributes);\n}\n\n// You can add some keys manually to attributes or telemetry\nattributes.eui = data.deviceInfo.?devEui;\nattributes.devAddr = data.devAddr;\nattributes.fPort = data.fPort;\nattributes.applicationId = data.deviceInfo.?applicationId;\nattributes.applicationName = data.deviceInfo.?applicationName;\nattributes.tenantId = data.deviceInfo.?tenantId;\nattributes.tenantName = data.deviceInfo.?tenantName;\nattributes.deviceProfileId = data.deviceInfo.?deviceProfileId;\nattributes.deviceProfileName = data.deviceInfo.?deviceProfileName;\nattributes.frequency = data.txInfo.?frequency;\nattributes.bandwidth = data.txInfo.?modulation.?lora.?bandwidth;\nattributes.spreadingFactor = data.txInfo.?modulation.?lora.?spreadingFactor;\nattributes.codeRate = data.txInfo.?modulation.?lora.?codeRate;\n\nif(Boolean.parseBoolean(metadata[\"includeGatewayInfo\"])) {\n   var gatewayInfo = getGatewayInfo();\n   var addDataToTelemetry = {};\n   addDataToTelemetry.snr = gatewayInfo.snr;\n   addDataToTelemetry.rssi = gatewayInfo.rssi;\n   addDataToTelemetry.channel = gatewayInfo.channel;\n   addDataToTelemetry.rfChain = gatewayInfo.rfChain;\n   addDataToTelemetry.fCnt = data.fCnt;\n   \n   telemetry = processTelemetryData(telemetry, addDataToTelemetry);\n}\n\nvar result = {\n    deviceName: deviceName,\n    deviceType: deviceType,\n    //  assetName: assetName,\n    //  assetType: assetType,\n    attributes: attributes,\n    telemetry: telemetry\n};\n\naddAdditionalInfoForDeviceMsg(result, customerName, groupName);\n\nreturn result;\n\nfunction addAdditionalInfoForDeviceMsg(deviceInfo, customerName, groupName) {\n    if (customerName != null) {\n        deviceInfo.customerName = customerName;\n    }\n    if (groupName != null) {\n        deviceInfo.groupName = groupName;\n    }\n}\n\nfunction parseDateToTimestamp(dateString) {\n    var timestamp = -1;\n    if (dateString != null) {\n        timestamp = new Date(dateString).getTime();\n        if (timestamp == -1) {\n            var secondsSeparatorIndex = dateString.lastIndexOf(\n                '.') + 1;\n            var millisecondsEndIndex = dateString.lastIndexOf(\n                '+');\n            if (millisecondsEndIndex == -1) {\n                millisecondsEndIndex = dateString.lastIndexOf(\n                    'Z');\n            }\n            if (millisecondsEndIndex == -1) {\n                millisecondsEndIndex = dateString.lastIndexOf(\n                    '-');\n            }\n            if (millisecondsEndIndex == -1) {\n                if (dateString.length >= secondsSeparatorIndex +\n                    3) {\n                    dateString = dateString.substring(0,\n                        secondsSeparatorIndex + 3);\n                }\n            } else {\n                dateString = dateString.substring(0,\n                        secondsSeparatorIndex + 3) +\n                    dateString.substring(millisecondsEndIndex,\n                        dateString.length);\n            }\n            timestamp = new Date(dateString).getTime();\n        }\n    }\n    // If we cannot parse timestamp - we will use the current timestamp\n    if (timestamp == -1) {\n        timestamp = Date.now();\n    }\n    \n    return timestamp;\n}\n\nfunction getGatewayInfo() {\n    var gatewayList = data.rxInfo;\n    var maxRssi = Integer.MIN_VALUE;\n    var gatewayInfo = {};\n    \n    foreach (gateway : gatewayList) {\n        if(gateway.rssi > maxRssi) {\n            maxRssi = gateway.rssi;\n            gatewayInfo = gateway;\n        }\n    }\n    \n    return gatewayInfo;\n}\n\nfunction processTelemetryData(telemetry, addDataToTelemetry) {\n    if (telemetry.size > 1) {\n        telemetry = addDataToMultipleTelemetries(telemetry, addDataToTelemetry);\n    }\n    else if (telemetry.size == 1) {\n        telemetry = addDataToSingleTelemetry(telemetry, addDataToTelemetry);\n    }\n    else {\n        telemetry.add(addDataToTelemetry);\n    }\n    \n    return telemetry;\n}\n\nfunction addDataToMultipleTelemetries(telemetry, addDataToTelemetry) {\n    foreach(element : addDataToTelemetry.entrySet()) {\n        if(!telemetry[0][\"values\"].keys.contains(element.key)) {\n            telemetry[0][\"values\"][element.key] = element.value;\n        }\n        if (!telemetry[1][\"values\"].keys.contains(element.key)) {\n            telemetry[1][\"values\"][element.key] = element.value;\n        }\n    }\n    \n    return telemetry;\n}\n\nfunction addDataToSingleTelemetry(telemetry, addDataToTelemetry) {\n    foreach(element : addDataToTelemetry.entrySet()) {\n            if(!telemetry[0][\"values\"].keys.contains(element.key)) {\n                telemetry[0][\"values\"][element.key] = element.value;\n            }\n    }\n    \n    return telemetry;\n}\n\nfunction decodeDateCodeToTimestamp(bytes) {\n    var hexString = \"\";\n    for (b : bytes) {\n        hexString += String.format(\"%02X\", b);\n    }\n    \n    var yearString = hexString.substring(0, 4);\n    var monthString = hexString.substring(4, 6);\n    var dayString = hexString.substring(6, 8);\n    \n    var year = Integer.parseInt(yearString);\n    var month = Integer.parseInt(monthString); \n    var day = Integer.parseInt(dayString);\n    \n    var dateDateCode = new Date(year, month, day);\n    var timestampDateCode = dateDateCode.getTime();\n    \n    return timestampDateCode;\n}\n\nfunction setChannel(channelByte) {\n    var channel = \"undefined\";\n    \n    if(channelByte == 0x00) {\n        channel = \"temperature\";\n    }\n    else if (channelByte == 0x01) {\n        channel = \"humidity\";\n    }\n    \n    return channel;\n}\n\nfunction setSensorType(sensorTypeBytes) {\n    var sensorType = \"\";\n    \n    if(sensorTypeBytes == 0x01) {\n        sensorType = \"temperature sensor\";\n    }\n    else if (sensorTypeBytes == 0x02) {\n        sensorType = \"humidity sensor\";\n    }\n    else {\n        sensorType = \"disable all sensor thresholdsSet\"\n    }\n    \n    return sensorType;\n}",
    "encoder": null,
    "tbelEncoder": null,
    "updateOnlyKeys": [
      "tenantId",
      "tenantName",
      "applicationId",
      "applicationName",
      "deviceProfileId",
      "deviceProfileName",
      "devAddr",
      "fPort",
      "frequency",
      "bandwidth",
      "spreadingFactor",
      "codeRate",
      "channel",
      "rfChain",
      "eui",
      "battery_volt"
    ]
  },
  "additionalInfo": {
    "description": ""
  },
  "edgeTemplate": false
}